// قاعدة بيانات الأسئلة البرمجية (code snippets) لجميع اللغات والصعوبات
const codeSnippets = {
  python: {
    easy: [
      'print("Hello, World!")',
      'name = "Alice"\nprint(f"Hello, {name}!")',
      "numbers = [1, 2, 3, 4, 5]\nprint(sum(numbers))",
      "for i in range(5):\n    print(i)",
      'def greet(name):\n    return f"Hello, {name}!"\n\nprint(greet("Bob"))',
      "x = 10\ny = 20\nprint(x + y)",
      "numbers = [10, 20, 30]\nprint(sum(numbers))",
      'text = "hello world"\nprint(text.upper())',
      "nums = [1, 2, 3]\nprint(len(nums))",
      'name = "Ali"\nprint("Hello, " + name)',
      "num = 5\nprint(num * num)",
      'message = "Python"\nprint(message[::-1])',
      "list1 = [1, 2]\nlist2 = [3, 4]\nprint(list1 + list2)",
      "x = 15\ny = 3\nprint(x // y)",
      'fruits = ["apple", "banana"]\nprint(fruits[0])',
      'word = "code"\nprint(word.capitalize())',
      "n = 6\nprint(n % 2 == 0)",
      "items = [4, 5, 6]\nprint(max(items))",
      'name = "Sara"\nage = 22\nprint(name + " is " + str(age))',
      "a = 7\nb = 2\nprint(a > b)",
      "values = [1, 3, 5]\nprint(min(values))",
      's = "123"\nprint(int(s) + 1)',
      "flag = True\nprint(not flag)",
      "numbers = [1, 2, 3, 4, 5]\nprint(sum(numbers))",
      'text = "hello world"\nprint(text.upper())',
      "nums = [1, 2, 3]\nprint(len(nums))",
      'name = "Ali"\nprint("Hello, " + name)',
      "num = 5\nprint(num * num)",
      'message = "Python"\nprint(message[::-1])',
      "list1 = [1, 2]\nlist2 = [3, 4]\nprint(list1 + list2)",
      "x = 15\ny = 3\nprint(x // y)",
      'fruits = ["apple", "banana"]\nprint(fruits[0])',
      'word = "code"\nprint(word.capitalize())',
      "n = 6\nprint(n % 2 == 0)",
      "items = [4, 5, 6]\nprint(max(items))",
      'name = "Sara"\nage = 22\nprint(name + " is " + str(age))',
      "a = 7\nb = 2\nprint(a > b)",
      "values = [1, 3, 5]\nprint(min(values))",
      's = "123"\nprint(int(s) + 1)',
      "flag = True\nprint(not flag)",
      'colors = ["red", "green", "blue"]\nprint(len(colors))',
      'score = 90\nprint("Pass" if score >= 50 else "Fail")',
      "nums = [2, 4, 6]\nprint(all(n % 2 == 0 for n in nums))",
      'char = "A"\nprint(ord(char))',
      "x = 8\nprint(bin(x))",
      'names = ["Ali", "Sara"]\nprint(", ".join(names))',
      'price = 9.99\nprint(f"${price:.2f}")',
      'sentence = "Hello there"\nprint("there" in sentence)',
      'letters = ["a", "b", "c"]\nprint(letters.index("b"))',
      "data = [1, 2, 3]\ndata.append(4)\nprint(data)",
      "temp = 36.6\nprint(round(temp))",
      'word = "banana"\nprint(word.count("a"))',
      's = " test "\nprint(s.strip())',
      'colors = ["red", "green", "blue"]\nprint(len(colors))',
      'score = 90\nprint("Pass" if score >= 50 else "Fail")',
      "nums = [2, 4, 6]\nprint(all(n % 2 == 0 for n in nums))",
      'fruits = ["apple", "banana", "orange"]\nprint(fruits[0])',
      'age = 25\nif age >= 18:\n    print("Adult")\nelse:\n    print("Minor")',
      'count = 0\nwhile count < 3:\n    print(f"Count: {count}")\n    count += 1',
      "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)",
      'text = "Python Programming"\nprint(text.upper())',
      'num = 7\nif num % 2 == 0:\n    print("Even")\nelse:\n    print("Odd")',
      'colors = ["red", "green", "blue"]\nfor color in colors:\n    print(f"I like {color}")',
      'import math\nradius = 5\narea = math.pi * radius ** 2\nprint(f"Area: {area:.2f}")',
      'student = {"name": "John", "age": 20}\nprint(f"Student: {student[\'name\']}, Age: {student[\'age\']}")',
      "def add_numbers(a, b):\n    return a + b\n\nresult = add_numbers(5, 3)\nprint(result)",
      'my_string = "Hello World"\nprint(len(my_string))',
      'numbers = [10, 20, 30, 40]\nprint(f"First: {numbers[0]}, Last: {numbers[-1]}")',
      'temperature = 25\nif temperature > 30:\n    print("Hot")\nelif temperature > 20:\n    print("Warm")\nelse:\n    print("Cold")',
      'for i in range(1, 6):\n    print(f"{i} squared is {i**2}")',
      "def max_of_three(a, b, c):\n    return max(a, b, c)\n\nprint(max_of_three(10, 20, 5))",
      'grades = [85, 92, 78, 96, 88]\naverage = sum(grades) / len(grades)\nprint(f"Average grade: {average:.2f}")',
      'sentence = "Python is awesome"\nwords = sentence.split()\nprint(f"Number of words: {len(words)}")',
      "def is_even(number):\n    return number % 2 == 0\n\nprint(is_even(8))\nprint(is_even(7))",
      'import random\n\nrandom_number = random.randint(1, 100)\nprint(f"Random number: {random_number}")',
      'def celsius_to_fahrenheit(celsius):\n    return (celsius * 9/5) + 32\n\ntemp_c = 25\ntemp_f = celsius_to_fahrenheit(temp_c)\nprint(f"{temp_c}°C = {temp_f}°F")',
      'shopping_list = ["bread", "milk", "eggs"]\nshopping_list.extend(["butter", "cheese"])\nprint(shopping_list)',
      'def count_characters(text):\n    return len(text.replace(" ", ""))\n\ntext = "Hello World"\nprint(f"Characters (no spaces): {count_characters(text)}")',
      'numbers = [1, 2, 3, 4, 5]\nreversed_numbers = numbers[::-1]\nprint(f"Original: {numbers}")\nprint(f"Reversed: {reversed_numbers}")',
      'def simple_interest(principal, rate, time):\n    return (principal * rate * time) / 100\n\nprint(f"Simple Interest: {simple_interest(1000, 5, 2)}")',
      'user_input = input("Enter your name: ")\nprint(f"Nice to meet you, {user_input}!")',
      'def find_largest(numbers):\n    return max(numbers)\n\nnumber_list = [12, 45, 67, 23, 89]\nprint(f"Largest number: {find_largest(number_list)}")',
      'def multiply_list(numbers, multiplier):\n    return [num * multiplier for num in numbers]\n\noriginal = [1, 2, 3, 4, 5]\nresult = multiply_list(original, 3)\nprint(f"Original: {original}, Multiplied: {result}")',
      'def check_password_strength(password):\n    if len(password) >= 8:\n        return "Strong"\n    elif len(password) >= 5:\n        return "Medium"\n    else:\n        return "Weak"\n\nprint(check_password_strength("mypassword123"))',
      'books = {"Python": 2020, "Java": 2019, "C++": 2021}\nfor book, year in books.items():\n    print(f"{book} was published in {year}")',
      'def sum_of_digits(number):\n    return sum(int(digit) for digit in str(number))\n\nprint(f"Sum of digits in 12345: {sum_of_digits(12345)}")',
      'def create_full_name(first, last):\n    return f"{first} {last}"\n\nfull_name = create_full_name("John", "Doe")\nprint(f"Full name: {full_name}")',
      'numbers = [10, 20, 30, 40, 50]\nfiltered = [num for num in numbers if num > 25]\nprint(f"Numbers > 25: {filtered}")',
      'def discount_price(price, discount_percent):\n    discount = price * (discount_percent / 100)\n    return price - discount\n\noriginal_price = 100\ndiscounted = discount_price(original_price, 20)\nprint(f"Original: ${original_price}, Discounted: ${discounted}")',
    ],
    medium: [
      "numbers = [1, 2, 3, 4, 5]\nsquares = [x**2 for x in numbers]\nprint(squares)",
      "text = 'hello world'\nvowels = [c for c in text if c in 'aeiou']\nprint(vowels)",
      "nums = [10, 20, 30]\ndoubled = list(map(lambda x: x * 2, nums))\nprint(doubled)",
      "words = ['apple', 'banana', 'cherry']\nlengths = [len(w) for w in words]\nprint(lengths)",
      "x = 5\nfactorial = 1\nfor i in range(1, x+1): factorial *= i\nprint(factorial)",
      "nums = [1, 2, 3, 4, 5]\neven = list(filter(lambda x: x % 2 == 0, nums))\nprint(even)",
      "s = 'abc123'\nletters = [c for c in s if c.isalpha()]\nprint(letters)",
      "matrix = [[1, 2], [3, 4]]\nflat = [num for row in matrix for num in row]\nprint(flat)",
      "sentence = 'this is a test'\nwords = sentence.split()\nprint(words[::-1])",
      "n = 10\nfib = [0, 1]\nfor i in range(2, n): fib.append(fib[-1] + fib[-2])\nprint(fib)",
      "nums = [1, -2, 3, -4]\npositives = [n for n in nums if n > 0]\nprint(positives)",
      "items = ['pen', 'book', 'pen']\nunique = list(set(items))\nprint(unique)",
      "nums = [1, 2, 3]\nsum_sq = sum(x**2 for x in nums)\nprint(sum_sq)",
      "s = 'HELLO'\nlowered = ''.join([c.lower() for c in s])\nprint(lowered)",
      "words = ['hello', 'world']\ncapitalized = [w.capitalize() for w in words]\nprint(capitalized)",
      "x = 9\nroot = x ** 0.5\nprint(round(root, 2))",
      "nums = [5, 3, 8, 1]\nnums.sort()\nprint(nums)",
      "s = 'mississippi'\ncount_s = s.count('s')\nprint(count_s)",
      "nums = [2, 4, 6]\ncheck = all(n % 2 == 0 for n in nums)\nprint(check)",
      "names = ['ali', 'sara']\nresult = [f'Hi {name}' for name in names]\nprint(result)",
      "nums = [1, 2, 3, 4]\nsquares = list(map(lambda x: x*x, nums))\nprint(squares)",
      "sentence = 'hello world'\nreversed_words = ' '.join(sentence.split()[::-1])\nprint(reversed_words)",
      "grades = [90, 80, 70]\naverage = sum(grades)/len(grades)\nprint(round(average, 1))",
      "x = 5\nbinary = bin(x)[2:]\nprint(binary)",
      "data = [1, None, 2, None]\ncleaned = [x for x in data if x is not None]\nprint(cleaned)",
      "words = ['hi', 'hello']\ntotal = sum(len(w) for w in words)\nprint(total)",
      "s = 'data science'\nresult = ''.join(reversed(s))\nprint(result)",
      "numbers = range(1, 6)\nsquares_dict = {x: x**2 for x in numbers}\nprint(squares_dict)",
      "grades = {'Ali': 90, 'Sara': 85}\nnames = list(grades.keys())\nprint(names)",
      "sentence = 'a quick brown fox'\nlong = [w for w in sentence.split() if len(w) > 4]\nprint(long)",
      "numbers = [1, 2, 3, 4, 5]\nevens = [n for n in numbers if n % 2 == 0]\nprint(evens)",
      "x = [1, 2, 3]\ny = [4, 5, 6]\nsum_xy = [a + b for a, b in zip(x, y)]\nprint(sum_xy)",
      "names = ['Ali', 'Zahra']\nresult = {name: len(name) for name in names}\nprint(result)",
      "temps = [30.5, 32.1, 29.8]\nrounded = [round(t) for t in temps]\nprint(rounded)",
      "nums = [1, 2, 3, 4]\nreversed_nums = list(reversed(nums))\nprint(reversed_nums)",
      "sentence = 'The cat sat'\nupper_words = [w.upper() for w in sentence.split()]\nprint(upper_words)",
      "scores = [88, 77, 99]\nhigh = max(scores)\nprint(high)",
      "sentence = 'open ai is cool'\ncount = len(sentence.split())\nprint(count)",
      "nums = [1, 2, 3]\nprod = 1\nfor n in nums: prod *= n\nprint(prod)",
      "word = 'testing'\nletters = list(word)\nprint(letters)",
      "names = ['Ali', 'Sara']\nshort = [n for n in names if len(n) <= 4]\nprint(short)",
      "words = ['apple', 'banana']\nends_with_a = [w for w in words if w.endswith('a')]\nprint(ends_with_a)",
      "sentence = 'Python is fun'\nchars = [c for c in sentence if c != ' ']\nprint(chars)",
      "nums = [3, 1, 4]\nsorted_desc = sorted(nums, reverse=True)\nprint(sorted_desc)",
      "n = 5\npowers = [2**i for i in range(n)]\nprint(powers)",
      "items = [1, 2, 3, 4]\neven_index = items[::2]\nprint(even_index)",
      "x = [1, 2, 3]\ndoubled = [n*2 for n in x if n > 1]\nprint(doubled)",
      "s = 'python'\nnew = [c for c in s if c not in 'aeiou']\nprint(new)",
      "words = ['one', 'two']\njoined = '-'.join(words)\nprint(joined)",
      "nums = [4, 5, 6]\nmean = sum(nums)/len(nums)\nprint(mean)",
      "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)\n\nprint(factorial(5))",
      "numbers = [1, 2, 3, 4, 5]\nsquares = [x**2 for x in numbers]\nprint(squares)",
      "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\nprint(fibonacci(10))",
      'student_grades = {"Alice": 85, "Bob": 92, "Charlie": 78}\nfor name, grade in student_grades.items():\n    print(f"{name}: {grade}")',
      'import random\n\nnumbers = [random.randint(1, 100) for _ in range(10)]\nprint(f"Max: {max(numbers)}, Min: {min(numbers)}")',
      "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nprint(is_prime(17))",
      'text = "hello world"\nwords = text.split()\ncapitalized = [word.capitalize() for word in words]\nprint(" ".join(capitalized))',
      'def reverse_string(s):\n    return s[::-1]\n\noriginal = "Python"\nreversed_text = reverse_string(original)\nprint(f"Original: {original}, Reversed: {reversed_text}")',
      "import datetime\n\nnow = datetime.datetime.now()\nprint(f\"Current time: {now.strftime('%Y-%m-%d %H:%M:%S')}\")",
      'def count_vowels(text):\n    vowels = "aeiouAEIOU"\n    count = 0\n    for char in text:\n        if char in vowels:\n            count += 1\n    return count\n\nprint(count_vowels("Hello World"))',
      "numbers = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4]\nfrom collections import Counter\nfreq = Counter(numbers)\nprint(dict(freq))",
      "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n\narr = [1, 3, 5, 7, 9]\nprint(binary_search(arr, 5))",
      'def remove_duplicates(lst):\n    return list(set(lst))\n\noriginal = [1, 2, 2, 3, 3, 4]\nunique = remove_duplicates(original)\nprint(f"Original: {original}, Unique: {unique}")',
      'import json\n\ndata = {"name": "John", "age": 30, "city": "New York"}\njson_string = json.dumps(data)\nprint(json_string)',
      'def palindrome_check(s):\n    cleaned = s.lower().replace(" ", "")\n    return cleaned == cleaned[::-1]\n\nprint(palindrome_check("A man a plan a canal Panama"))',
      "def matrix_multiply(A, B):\n    result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n\nA = [[1, 2], [3, 4]]\nB = [[5, 6], [7, 8]]\nprint(matrix_multiply(A, B))",
      "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)\n\nprint(quick_sort([3, 6, 8, 10, 1, 2, 1]))",
      'def generate_password(length=8):\n    import random\n    import string\n    chars = string.ascii_letters + string.digits + "!@#$%^&*"\n    return "".join(random.choice(chars) for _ in range(length))\n\nprint(generate_password(12))',
      'class Calculator:\n    def add(self, a, b):\n        return a + b\n    def subtract(self, a, b):\n        return a - b\n    def multiply(self, a, b):\n        return a * b\n    def divide(self, a, b):\n        return a / b if b != 0 else "Cannot divide by zero"\n\ncalc = Calculator()\nprint(calc.add(5, 3))',
      "def find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))\n\nlist1 = [1, 2, 3, 4, 5]\nlist2 = [4, 5, 6, 7, 8]\nprint(find_common_elements(list1, list2))",
      "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\ndata = [64, 34, 25, 12, 22, 11, 90]\nprint(bubble_sort(data))",
      'def word_frequency(text):\n    words = text.lower().split()\n    freq = {}\n    for word in words:\n        freq[word] = freq.get(word, 0) + 1\n    return freq\n\ntext = "hello world hello python world"\nprint(word_frequency(text))',
      'class Student:\n    def __init__(self, name, grades):\n        self.name = name\n        self.grades = grades\n    \n    def get_average(self):\n        return sum(self.grades) / len(self.grades)\n\nstudent = Student("Alice", [85, 92, 78, 96])\nprint(f"Average: {student.get_average():.2f}")',
      'def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)\n\nprint(f"GCD of 12 and 18: {gcd(12, 18)}")\nprint(f"LCM of 12 and 18: {lcm(12, 18)}")',
      'def rotate_list(lst, k):\n    if not lst:\n        return lst\n    k = k % len(lst)\n    return lst[k:] + lst[:k]\n\noriginal = [1, 2, 3, 4, 5]\nrotated = rotate_list(original, 2)\nprint(f"Original: {original}, Rotated: {rotated}")',
      'import re\n\ndef validate_email(email):\n    pattern = r"^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"\n    return re.match(pattern, email) is not None\n\nprint(validate_email("user@example.com"))\nprint(validate_email("invalid-email"))',
      "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n\nnested = [1, [2, 3], [4, [5, 6]], 7]\nprint(flatten_list(nested))",
      "def memoize(func):\n    cache = {}\n    def wrapper(*args):\n        if args not in cache:\n            cache[args] = func(*args)\n        return cache[args]\n    return wrapper\n\n@memoize\ndef fibonacci_memo(n):\n    if n <= 1:\n        return n\n    return fibonacci_memo(n-1) + fibonacci_memo(n-2)\n\nprint(fibonacci_memo(20))",
      "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr\n\ndata = [12, 11, 13, 5, 6]\nprint(insertion_sort(data))",
      'def anagram_check(str1, str2):\n    return sorted(str1.lower()) == sorted(str2.lower())\n\nprint(anagram_check("listen", "silent"))\nprint(anagram_check("hello", "world"))',
      'def find_missing_number(nums):\n    n = len(nums) + 1\n    expected_sum = n * (n + 1) // 2\n    actual_sum = sum(nums)\n    return expected_sum - actual_sum\n\nnumbers = [1, 2, 4, 5, 6]\nprint(f"Missing number: {find_missing_number(numbers)}")',
      "class Queue:\n    def __init__(self):\n        self.items = []\n    \n    def enqueue(self, item):\n        self.items.append(item)\n    \n    def dequeue(self):\n        if self.items:\n            return self.items.pop(0)\n        return None\n    \n    def is_empty(self):\n        return len(self.items) == 0\n\nq = Queue()\nq.enqueue(1)\nq.enqueue(2)\nprint(q.dequeue())",
      "def two_sum(nums, target):\n    num_map = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_map:\n            return [num_map[complement], i]\n        num_map[num] = i\n    return []\n\nnums = [2, 7, 11, 15]\nprint(two_sum(nums, 9))",
      'def group_anagrams(strs):\n    from collections import defaultdict\n    anagrams = defaultdict(list)\n    for s in strs:\n        sorted_s = "".join(sorted(s))\n        anagrams[sorted_s].append(s)\n    return list(anagrams.values())\n\nwords = ["eat", "tea", "tan", "ate", "nat", "bat"]\nprint(group_anagrams(words))',
      "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr\n\ndata = [64, 25, 12, 22, 11]\nprint(selection_sort(data))",
      'def longest_substring_without_repeating(s):\n    char_set = set()\n    left = 0\n    max_length = 0\n    \n    for right in range(len(s)):\n        while s[right] in char_set:\n            char_set.remove(s[left])\n            left += 1\n        char_set.add(s[right])\n        max_length = max(max_length, right - left + 1)\n    \n    return max_length\n\nprint(longest_substring_without_repeating("abcabcbb"))',
      'def caesar_cipher(text, shift):\n    result = ""\n    for char in text:\n        if char.isalpha():\n            ascii_offset = ord(\'A\') if char.isupper() else ord(\'a\')\n            shifted = (ord(char) - ascii_offset + shift) % 26\n            result += chr(shifted + ascii_offset)\n        else:\n            result += char\n    return result\n\ntext = "Hello World"\nencrypted = caesar_cipher(text, 3)\nprint(f"Original: {text}, Encrypted: {encrypted}")',
      "def merge_sorted_arrays(arr1, arr2):\n    result = []\n    i = j = 0\n    \n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] <= arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    \n    result.extend(arr1[i:])\n    result.extend(arr2[j:])\n    return result\n\narray1 = [1, 3, 5, 7]\narray2 = [2, 4, 6, 8]\nprint(merge_sorted_arrays(array1, array2))",
      'def valid_parentheses(s):\n    stack = []\n    mapping = {")": "(", "}": "{", "]": "["}\n    \n    for char in s:\n        if char in mapping:\n            if not stack or stack.pop() != mapping[char]:\n                return False\n        else:\n            stack.append(char)\n    \n    return not stack\n\nprint(valid_parentheses("()[]{}"))  # True\nprint(valid_parentheses("([)]"))    # False',
    ],
    hard: [
      "class BankAccount:\n    def __init__(self, balance=0):\n        self.balance = balance\n    \n    def deposit(self, amount):\n        self.balance += amount\n    \n    def withdraw(self, amount):\n        if amount <= self.balance:\n            self.balance -= amount\n            return True\n        return False\n\naccount = BankAccount(100)\nprint(account.balance)",
      "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    \n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    \n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    \n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result",
      'import threading\nimport time\n\ndef worker(name, delay):\n    for i in range(3):\n        time.sleep(delay)\n        print(f"Worker {name}: Task {i+1} completed")\n\nthread1 = threading.Thread(target=worker, args=("A", 1))\nthread2 = threading.Thread(target=worker, args=("B", 1.5))\n\nthread1.start()\nthread2.start()\n\nthread1.join()\nthread2.join()\nprint("All workers completed")',
      'class TreeNode:\n    def __init__(self, val=0, left=None, right=None):\n        self.val = val\n        self.left = left\n        self.right = right\n\ndef inorder_traversal(root):\n    if root:\n        inorder_traversal(root.left)\n        print(root.val, end=" ")\n        inorder_traversal(root.right)\n\nroot = TreeNode(1)\nroot.left = TreeNode(2)\nroot.right = TreeNode(3)\nroot.left.left = TreeNode(4)\nroot.left.right = TreeNode(5)\n\ninorder_traversal(root)',
      "def dijkstra(graph, start):\n    import heapq\n    distances = {node: float('inf') for node in graph}\n    distances[start] = 0\n    pq = [(0, start)]\n    \n    while pq:\n        current_dist, current = heapq.heappop(pq)\n        \n        if current_dist > distances[current]:\n            continue\n            \n        for neighbor, weight in graph[current].items():\n            distance = current_dist + weight\n            if distance < distances[neighbor]:\n                distances[neighbor] = distance\n                heapq.heappush(pq, (distance, neighbor))\n    \n    return distances\n\ngraph = {'A': {'B': 1, 'C': 4}, 'B': {'C': 2, 'D': 5}, 'C': {'D': 1}, 'D': {}}\nprint(dijkstra(graph, 'A'))",
      'import sqlite3\n\ndef create_database():\n    conn = sqlite3.connect(\'example.db\')\n    cursor = conn.cursor()\n    \n    cursor.execute("""CREATE TABLE IF NOT EXISTS users\n                     (id INTEGER PRIMARY KEY, name TEXT, email TEXT)""")\n    \n    cursor.execute("INSERT INTO users (name, email) VALUES (?, ?)", ("John", "john@email.com"))\n    cursor.execute("INSERT INTO users (name, email) VALUES (?, ?)", ("Jane", "jane@email.com"))\n    \n    conn.commit()\n    \n    cursor.execute("SELECT * FROM users")\n    users = cursor.fetchall()\n    \n    for user in users:\n        print(user)\n    \n    conn.close()\n\ncreate_database()',
      "class LRUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.cache = {}\n        self.order = []\n    \n    def get(self, key):\n        if key in self.cache:\n            self.order.remove(key)\n            self.order.append(key)\n            return self.cache[key]\n        return -1\n    \n    def put(self, key, value):\n        if key in self.cache:\n            self.order.remove(key)\n        elif len(self.cache) >= self.capacity:\n            oldest = self.order.pop(0)\n            del self.cache[oldest]\n        \n        self.cache[key] = value\n        self.order.append(key)\n\ncache = LRUCache(2)\ncache.put(1, 1)\ncache.put(2, 2)\nprint(cache.get(1))",
      'def longest_common_subsequence(text1, text2):\n    m, n = len(text1), len(text2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if text1[i-1] == text2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[m][n]\n\ntext1 = "abcde"\ntext2 = "ace"\nprint(longest_common_subsequence(text1, text2))',
      'import asyncio\n\nasync def fetch_data(url, delay):\n    await asyncio.sleep(delay)\n    return f"Data from {url}"\n\nasync def main():\n    tasks = [\n        fetch_data("api1.com", 1),\n        fetch_data("api2.com", 2),\n        fetch_data("api3.com", 1.5)\n    ]\n    \n    results = await asyncio.gather(*tasks)\n    for result in results:\n        print(result)\n\nasyncio.run(main())',
      "class MinHeap:\n    def __init__(self):\n        self.heap = []\n    \n    def parent(self, i):\n        return (i - 1) // 2\n    \n    def left_child(self, i):\n        return 2 * i + 1\n    \n    def right_child(self, i):\n        return 2 * i + 2\n    \n    def insert(self, key):\n        self.heap.append(key)\n        self._heapify_up(len(self.heap) - 1)\n    \n    def _heapify_up(self, i):\n        while i > 0 and self.heap[i] < self.heap[self.parent(i)]:\n            self.heap[i], self.heap[self.parent(i)] = self.heap[self.parent(i)], self.heap[i]\n            i = self.parent(i)\n    \n    def extract_min(self):\n        if not self.heap:\n            return None\n        \n        min_val = self.heap[0]\n        self.heap[0] = self.heap[-1]\n        self.heap.pop()\n        self._heapify_down(0)\n        return min_val\n    \n    def _heapify_down(self, i):\n        while True:\n            smallest = i\n            left = self.left_child(i)\n            right = self.right_child(i)\n            \n            if left < len(self.heap) and self.heap[left] < self.heap[smallest]:\n                smallest = left\n            \n            if right < len(self.heap) and self.heap[right] < self.heap[smallest]:\n                smallest = right\n            \n            if smallest != i:\n                self.heap[i], self.heap[smallest] = self.heap[smallest], self.heap[i]\n                i = smallest\n            else:\n                break\n\nheap = MinHeap()\nheap.insert(5)\nheap.insert(3)\nheap.insert(8)\nheap.insert(1)\nprint(heap.extract_min())",
      'class AVLTree:\n    def __init__(self, key=None):\n        self.key = key\n        self.left = None\n        self.right = None\n        self.height = 1\n    \n    def get_height(self, node):\n        if not node:\n            return 0\n        return node.height\n    \n    def get_balance(self, node):\n        if not node:\n            return 0\n        return self.get_height(node.left) - self.get_height(node.right)\n    \n    def rotate_right(self, y):\n        x = y.left\n        T2 = x.right\n        x.right = y\n        y.left = T2\n        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))\n        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))\n        return x\n    \n    def rotate_left(self, x):\n        y = x.right\n        T2 = y.left\n        y.left = x\n        x.right = T2\n        x.height = 1 + max(self.get_height(x.left), self.get_height(x.right))\n        y.height = 1 + max(self.get_height(y.left), self.get_height(y.right))\n        return y\n    \n    def insert(self, root, key):\n        if not root:\n            return AVLTree(key)\n        \n        if key < root.key:\n            root.left = self.insert(root.left, key)\n        else:\n            root.right = self.insert(root.right, key)\n        \n        root.height = 1 + max(self.get_height(root.left), self.get_height(root.right))\n        balance = self.get_balance(root)\n        \n        if balance > 1 and key < root.left.key:\n            return self.rotate_right(root)\n        if balance < -1 and key > root.right.key:\n            return self.rotate_left(root)\n        if balance > 1 and key > root.left.key:\n            root.left = self.rotate_left(root.left)\n            return self.rotate_right(root)\n        if balance < -1 and key < root.right.key:\n            root.right = self.rotate_right(root.right)\n            return self.rotate_left(root)\n        \n        return root\n\nroot = None\navl = AVLTree()\nroot = avl.insert(root, 10)\nroot = avl.insert(root, 20)\nroot = avl.insert(root, 30)\nprint(f"Root: {root.key}")',
      'def knapsack_dp(weights, values, capacity):\n    n = len(weights)\n    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for w in range(1, capacity + 1):\n            if weights[i-1] <= w:\n                dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w])\n            else:\n                dp[i][w] = dp[i-1][w]\n    \n    return dp[n][capacity]\n\nweights = [10, 20, 30]\nvalues = [60, 100, 120]\ncapacity = 50\nprint(f"Maximum value: {knapsack_dp(weights, values, capacity)}")',
      'class Graph:\n    def __init__(self):\n        self.graph = {}\n    \n    def add_edge(self, u, v):\n        if u not in self.graph:\n            self.graph[u] = []\n        if v not in self.graph:\n            self.graph[v] = []\n        self.graph[u].append(v)\n        self.graph[v].append(u)\n    \n    def dfs(self, start, visited=None):\n        if visited is None:\n            visited = set()\n        \n        visited.add(start)\n        print(start, end=" ")\n        \n        for neighbor in self.graph.get(start, []):\n            if neighbor not in visited:\n                self.dfs(neighbor, visited)\n    \n    def bfs(self, start):\n        from collections import deque\n        visited = set()\n        queue = deque([start])\n        visited.add(start)\n        \n        while queue:\n            vertex = queue.popleft()\n            print(vertex, end=" ")\n            \n            for neighbor in self.graph.get(vertex, []):\n                if neighbor not in visited:\n                    visited.add(neighbor)\n                    queue.append(neighbor)\n\ng = Graph()\ng.add_edge(0, 1)\ng.add_edge(0, 2)\ng.add_edge(1, 2)\ng.add_edge(2, 3)\nprint("DFS traversal:")\ng.dfs(0)\nprint("\\nBFS traversal:")\ng.bfs(0)',
      'def edit_distance(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i-1] == str2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1])\n    \n    return dp[m][n]\n\nstr1 = "kitten"\nstr2 = "sitting"\nprint(f"Edit distance: {edit_distance(str1, str2)}")',
      "class LFUCache:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.values = {}\n        self.frequencies = {}\n        self.freq_to_keys = {}\n        self.min_freq = 0\n    \n    def get(self, key):\n        if key not in self.values:\n            return -1\n        \n        self._update_freq(key)\n        return self.values[key]\n    \n    def put(self, key, value):\n        if self.capacity == 0:\n            return\n        \n        if key in self.values:\n            self.values[key] = value\n            self._update_freq(key)\n            return\n        \n        if len(self.values) >= self.capacity:\n            self._evict()\n        \n        self.values[key] = value\n        self.frequencies[key] = 1\n        if 1 not in self.freq_to_keys:\n            self.freq_to_keys[1] = set()\n        self.freq_to_keys[1].add(key)\n        self.min_freq = 1\n    \n    def _update_freq(self, key):\n        freq = self.frequencies[key]\n        self.freq_to_keys[freq].remove(key)\n        \n        if not self.freq_to_keys[freq] and freq == self.min_freq:\n            self.min_freq += 1\n        \n        self.frequencies[key] = freq + 1\n        if freq + 1 not in self.freq_to_keys:\n            self.freq_to_keys[freq + 1] = set()\n        self.freq_to_keys[freq + 1].add(key)\n    \n    def _evict(self):\n        key = self.freq_to_keys[self.min_freq].pop()\n        del self.values[key]\n        del self.frequencies[key]\n\ncache = LFUCache(2)\ncache.put(1, 1)\ncache.put(2, 2)\nprint(cache.get(1))",
      'def regex_match(text, pattern):\n    def dp(i, j):\n        if j == len(pattern):\n            return i == len(text)\n        \n        first_match = i < len(text) and (pattern[j] == text[i] or pattern[j] == \'.\')\n        \n        if j + 1 < len(pattern) and pattern[j + 1] == \'*\':\n            return dp(i, j + 2) or (first_match and dp(i + 1, j))\n        else:\n            return first_match and dp(i + 1, j + 1)\n    \n    return dp(0, 0)\n\ntext = "aab"\npattern = "c*a*b"\nprint(f"Match: {regex_match(text, pattern)}")',
      'class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n    \n    def search(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return node.is_end\n    \n    def starts_with(self, prefix):\n        node = self.root\n        for char in prefix:\n            if char not in node.children:\n                return False\n            node = node.children[char]\n        return True\n\ntrie = Trie()\ntrie.insert("apple")\ntrie.insert("app")\nprint(trie.search("app"))\nprint(trie.starts_with("app"))',
      "def n_queens(n):\n    def is_safe(board, row, col):\n        for i in range(row):\n            if board[i][col] == 1:\n                return False\n        \n        for i, j in zip(range(row-1, -1, -1), range(col-1, -1, -1)):\n            if board[i][j] == 1:\n                return False\n        \n        for i, j in zip(range(row-1, -1, -1), range(col+1, n)):\n            if board[i][j] == 1:\n                return False\n        \n        return True\n    \n    def solve(board, row):\n        if row == n:\n            return True\n        \n        for col in range(n):\n            if is_safe(board, row, col):\n                board[row][col] = 1\n                if solve(board, row + 1):\n                    return True\n                board[row][col] = 0\n        \n        return False\n    \n    board = [[0] * n for _ in range(n)]\n    if solve(board, 0):\n        return board\n    return None\n\nsolution = n_queens(4)\nif solution:\n    for row in solution:\n        print(row)",
      
      "class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n    \n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def union(self, x, y):\n        px, py = self.find(x), self.find(y)\n        if px == py:\n            return\n        if self.rank[px] < self.rank[py]:\n            px, py = py, px\n        self.parent[py] = px\n        if self.rank[px] == self.rank[py]:\n            self.rank[px] += 1\n    \n    def connected(self, x, y):\n        return self.find(x) == self.find(y)\n\ndef kruskal_mst(edges, n):\n    edges.sort(key=lambda x: x[2])\n    uf = UnionFind(n)\n    mst = []\n    \n    for u, v, weight in edges:\n        if not uf.connected(u, v):\n            uf.union(u, v)\n            mst.append((u, v, weight))\n    \n    return mst\n\nedges = [(0, 1, 10), (0, 2, 6), (0, 3, 5), (1, 3, 15), (2, 3, 4)]\nprint(kruskal_mst(edges, 4))",
    ],
  },
  cpp: {
    easy: [
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << "Hello, World!" << endl;\n    return 0;\n}',
      "#include <iostream>\nusing namespace std;\n\nint main() {\n    int x = 10, y = 20;\n    cout << x + y << endl;\n    return 0;\n}",
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    for(int i = 0; i < 5; i++) {\n        cout << i << " ";\n    }\n    return 0;\n}',
      "#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int sum = 0;\n    for(int i = 0; i < 5; i++) {\n        sum += arr[i];\n    }\n    cout << sum << endl;\n    return 0;\n}",
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int age;\n    cout << "Enter your age: ";\n    cin >> age;\n    if(age >= 18) {\n        cout << "Adult" << endl;\n    } else {\n        cout << "Minor" << endl;\n    }\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int count = 0;\n    while(count < 3) {\n        cout << "Count: " << count << endl;\n        count++;\n    }\n    return 0;\n}',
      '#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string name = "Alice";\n    cout << "Hello, " << name << "!" << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int num;\n    cout << "Enter a number: ";\n    cin >> num;\n    if(num % 2 == 0) {\n        cout << "Even" << endl;\n    } else {\n        cout << "Odd" << endl;\n    }\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int factorial = 1;\n    int n = 5;\n    for(int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n    cout << "Factorial of " << n << " is " << factorial << endl;\n    return 0;\n}',
      "#include <iostream>\nusing namespace std;\n\nint main() {\n    char grade = 'A';\n    switch(grade) {\n        case 'A':\n            cout << \"Excellent!\" << endl;\n            break;\n        case 'B':\n            cout << \"Good!\" << endl;\n            break;\n        case 'C':\n            cout << \"Average!\" << endl;\n            break;\n        default:\n            cout << \"Keep trying!\" << endl;\n    }\n    return 0;\n}",
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    double radius = 5.0;\n    double area = 3.14159 * radius * radius;\n    cout << "Area of circle: " << area << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[] = {10, 20, 30, 40, 50};\n    int size = sizeof(arr) / sizeof(arr[0]);\n    cout << "Array elements: ";\n    for(int i = 0; i < size; i++) {\n        cout << arr[i] << " ";\n    }\n    cout << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int a = 5, b = 10;\n    cout << "Before swap: a = " << a << ", b = " << b << endl;\n    int temp = a;\n    a = b;\n    b = temp;\n    cout << "After swap: a = " << a << ", b = " << b << endl;\n    return 0;\n}',
      '#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string text = "Hello World";\n    cout << "Length of string: " << text.length() << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int table = 5;\n    cout << "Multiplication table of " << table << ":" << endl;\n    for(int i = 1; i <= 10; i++) {\n        cout << table << " x " << i << " = " << table * i << endl;\n    }\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int num, digit, sum = 0;\n    cout << "Enter a number: ";\n    cin >> num;\n    \n    while(num > 0) {\n        digit = num % 10;\n        sum += digit;\n        num /= 10;\n    }\n    \n    cout << "Sum of digits: " << sum << endl;\n    return 0;\n}',
      "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string str;\n    cout << \"Enter a string: \";\n    getline(cin, str);\n    \n    int vowels = 0;\n    for(char c : str) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            vowels++;\n        }\n    }\n    \n    cout << \"Number of vowels: \" << vowels << endl;\n    return 0;\n}",
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, reversed = 0;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    while(n > 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    \n    cout << "Reversed number: " << reversed << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    for(int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    \n    cout << "Sum of first " << n << " natural numbers: " << sum << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {10, 20, 30, 40, 50};\n    int max_val = arr[0];\n    \n    for(int i = 1; i < 5; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n    \n    cout << "Maximum value: " << max_val << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter number of terms: ";\n    cin >> n;\n    \n    int first = 0, second = 1;\n    cout << "Fibonacci series: " << first << " " << second << " ";\n    \n    for(int i = 2; i < n; i++) {\n        int next = first + second;\n        cout << next << " ";\n        first = second;\n        second = next;\n    }\n    \n    cout << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    bool is_prime = true;\n    if(n <= 1) {\n        is_prime = false;\n    } else {\n        for(int i = 2; i * i <= n; i++) {\n            if(n % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    }\n    \n    if(is_prime) {\n        cout << n << " is prime" << endl;\n    } else {\n        cout << n << " is not prime" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int matrix[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    \n    cout << "Matrix:" << endl;\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 3; j++) {\n            cout << matrix[i][j] << " ";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    int original = n;\n    int reversed = 0;\n    \n    while(n > 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    \n    if(original == reversed) {\n        cout << original << " is a palindrome" << endl;\n    } else {\n        cout << original << " is not a palindrome" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    float celsius, fahrenheit;\n    cout << "Enter temperature in Celsius: ";\n    cin >> celsius;\n    \n    fahrenheit = (celsius * 9.0 / 5.0) + 32;\n    cout << celsius << "°C = " << fahrenheit << "°F" << endl;\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter number of rows: ";\n    cin >> n;\n    \n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= i; j++) {\n            cout << "* ";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cout << "Enter two numbers: ";\n    cin >> a >> b;\n    \n    while(b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    \n    cout << "GCD: " << a << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    int sum = 0;\n    int temp = n;\n    \n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    \n    if(sum == n) {\n        cout << n << " is an Armstrong number" << endl;\n    } else {\n        cout << n << " is not an Armstrong number" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {5, 2, 8, 1, 9};\n    int n = 5;\n    \n    // Bubble sort\n    for(int i = 0; i < n-1; i++) {\n        for(int j = 0; j < n-i-1; j++) {\n            if(arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    \n    cout << "Sorted array: ";\n    for(int i = 0; i < n; i++) {\n        cout << arr[i] << " ";\n    }\n    cout << endl;\n    \n    return 0;\n}',
    ],
    medium: [
      "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if(n == 0) return 1;\n    return n * factorial(n-1);\n}\n\nint main() {\n    cout << factorial(5) << endl;\n    return 0;\n}",
      '#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> numbers = {1, 2, 3, 4, 5};\n    for(int num : numbers) {\n        cout << num * num << " ";\n    }\n    return 0;\n}',
      '#include <iostream>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> arr = {64, 34, 25, 12, 22, 11, 90};\n    sort(arr.begin(), arr.end());\n    for(int num : arr) {\n        cout << num << " ";\n    }\n    return 0;\n}',
      '#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Matrix {\npublic:\n    vector<vector<int>> data;\n    int rows, cols;\n    \n    Matrix(int r, int c) : rows(r), cols(c) {\n        data.resize(r, vector<int>(c, 0));\n    }\n    \n    Matrix multiply(const Matrix& other) {\n        Matrix result(rows, other.cols);\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < other.cols; j++) {\n                for(int k = 0; k < cols; k++) {\n                    result.data[i][j] += data[i][k] * other.data[k][j];\n                }\n            }\n        }\n        return result;\n    }\n    \n    void print() {\n        for(int i = 0; i < rows; i++) {\n            for(int j = 0; j < cols; j++) {\n                cout << data[i][j] << " ";\n            }\n            cout << endl;\n        }\n    }\n};\n\nint main() {\n    Matrix a(2, 2);\n    a.data = {{1, 2}, {3, 4}};\n    Matrix b(2, 2);\n    b.data = {{5, 6}, {7, 8}};\n    \n    Matrix c = a.multiply(b);\n    c.print();\n    \n    return 0;\n}',
      '#include <iostream>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nbool isPalindrome(string s) {\n    string cleaned = "";\n    for(char c : s) {\n        if(isalnum(c)) {\n            cleaned += tolower(c);\n        }\n    }\n    \n    string reversed = cleaned;\n    reverse(reversed.begin(), reversed.end());\n    return cleaned == reversed;\n}\n\nint main() {\n    string input;\n    cout << "Enter a string: ";\n    getline(cin, input);\n    \n    if(isPalindrome(input)) {\n        cout << "The string is a palindrome" << endl;\n    } else {\n        cout << "The string is not a palindrome" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nvector<int> twoSum(vector<int>& nums, int target) {\n    unordered_map<int, int> map;\n    for(int i = 0; i < nums.size(); i++) {\n        int complement = target - nums[i];\n        if(map.find(complement) != map.end()) {\n            return {map[complement], i};\n        }\n        map[nums[i]] = i;\n    }\n    return {};\n}\n\nint main() {\n    vector<int> nums = {2, 7, 11, 15};\n    int target = 9;\n    \n    vector<int> result = twoSum(nums, target);\n    if(!result.empty()) {\n        cout << "Indices: " << result[0] << ", " << result[1] << endl;\n    } else {\n        cout << "No solution found" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass ListNode {\npublic:\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(nullptr) {}\n};\n\nclass LinkedList {\npublic:\n    ListNode* head;\n    \n    LinkedList() : head(nullptr) {}\n    \n    void insert(int val) {\n        ListNode* newNode = new ListNode(val);\n        newNode->next = head;\n        head = newNode;\n    }\n    \n    void reverse() {\n        ListNode* prev = nullptr;\n        ListNode* current = head;\n        ListNode* next = nullptr;\n        \n        while(current != nullptr) {\n            next = current->next;\n            current->next = prev;\n            prev = current;\n            current = next;\n        }\n        head = prev;\n    }\n    \n    void print() {\n        ListNode* current = head;\n        while(current != nullptr) {\n            cout << current->val << " ";\n            current = current->next;\n        }\n        cout << endl;\n    }\n};\n\nint main() {\n    LinkedList list;\n    list.insert(1);\n    list.insert(2);\n    list.insert(3);\n    list.insert(4);\n    \n    cout << "Original list: ";\n    list.print();\n    \n    list.reverse();\n    cout << "Reversed list: ";\n    list.print();\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nint binarySearch(vector<int>& arr, int target) {\n    int left = 0, right = arr.size() - 1;\n    \n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        if(arr[mid] == target) {\n            return mid;\n        } else if(arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    \n    return -1;\n}\n\nint main() {\n    vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15};\n    int target = 7;\n    \n    int result = binarySearch(arr, target);\n    if(result != -1) {\n        cout << "Element found at index: " << result << endl;\n    } else {\n        cout << "Element not found" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass Student {\npublic:\n    string name;\n    vector<int> grades;\n    \n    Student(string n) : name(n) {}\n    \n    void addGrade(int grade) {\n        grades.push_back(grade);\n    }\n    \n    double getAverage() {\n        if(grades.empty()) return 0;\n        \n        int sum = 0;\n        for(int grade : grades) {\n            sum += grade;\n        }\n        return (double)sum / grades.size();\n    }\n    \n    void display() {\n        cout << "Student: " << name << endl;\n        cout << "Grades: ";\n        for(int grade : grades) {\n            cout << grade << " ";\n        }\n        cout << endl;\n        cout << "Average: " << getAverage() << endl;\n    }\n};\n\nint main() {\n    Student student("John");\n    student.addGrade(85);\n    student.addGrade(92);\n    student.addGrade(78);\n    student.addGrade(96);\n    \n    student.display();\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nclass Graph {\npublic:\n    int V;\n    vector<vector<int>> adj;\n    \n    Graph(int vertices) : V(vertices) {\n        adj.resize(V);\n    }\n    \n    void addEdge(int u, int v) {\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    \n    void BFS(int start) {\n        vector<bool> visited(V, false);\n        queue<int> q;\n        \n        visited[start] = true;\n        q.push(start);\n        \n        cout << "BFS traversal: ";\n        while(!q.empty()) {\n            int u = q.front();\n            q.pop();\n            cout << u << " ";\n            \n            for(int v : adj[u]) {\n                if(!visited[v]) {\n                    visited[v] = true;\n                    q.push(v);\n                }\n            }\n        }\n        cout << endl;\n    }\n    \n    void DFS(int start) {\n        vector<bool> visited(V, false);\n        cout << "DFS traversal: ";\n        DFSUtil(start, visited);\n        cout << endl;\n    }\n    \nprivate:\n    void DFSUtil(int u, vector<bool>& visited) {\n        visited[u] = true;\n        cout << u << " ";\n        \n        for(int v : adj[u]) {\n            if(!visited[v]) {\n                DFSUtil(v, visited);\n            }\n        }\n    }\n};\n\nint main() {\n    Graph g(4);\n    g.addEdge(0, 1);\n    g.addEdge(0, 2);\n    g.addEdge(1, 2);\n    g.addEdge(2, 3);\n    \n    g.BFS(0);\n    g.DFS(0);\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvoid mergeSort(vector<int>& arr, int left, int right) {\n    if(left < right) {\n        int mid = left + (right - left) / 2;\n        \n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}\n\nvoid merge(vector<int>& arr, int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n    \n    vector<int> L(n1), R(n2);\n    \n    for(int i = 0; i < n1; i++) {\n        L[i] = arr[left + i];\n    }\n    for(int j = 0; j < n2; j++) {\n        R[j] = arr[mid + 1 + j];\n    }\n    \n    int i = 0, j = 0, k = left;\n    \n    while(i < n1 && j < n2) {\n        if(L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n    \n    while(i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n    \n    while(j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nint main() {\n    vector<int> arr = {64, 34, 25, 12, 22, 11, 90};\n    \n    cout << "Original array: ";\n    for(int num : arr) {\n        cout << num << " ";\n    }\n    cout << endl;\n    \n    mergeSort(arr, 0, arr.size() - 1);\n    \n    cout << "Sorted array: ";\n    for(int num : arr) {\n        cout << num << " ";\n    }\n    cout << endl;\n    \n    return 0;\n}',
      "#include <iostream>\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass LRUCache {\npublic:\n    int capacity;\n    list<pair<int, int>> cache;\n    unordered_map<int, list<pair<int, int>>::iterator> map;\n    \n    LRUCache(int cap) : capacity(cap) {}\n    \n    int get(int key) {\n        if(map.find(key) != map.end()) {\n            auto it = map[key];\n            int value = it->second;\n            cache.erase(it);\n            cache.push_front({key, value});\n            map[key] = cache.begin();\n            return value;\n        }\n        return -1;\n    }\n    \n    void put(int key, int value) {\n        if(map.find(key) != map.end()) {\n            cache.erase(map[key]);\n        } else if(cache.size() >= capacity) {\n            int lru_key = cache.back().first;\n            cache.pop_back();\n            map.erase(lru_key);\n        }\n        \n        cache.push_front({key, value});\n        map[key] = cache.begin();\n    }\n};\n\nint main() {\n    LRUCache cache(2);\n    cache.put(1, 1);\n    cache.put(2, 2);\n    cout << cache.get(1)) << endl;  // returns 1\n    cache.put(3, 3);              // evicts key 2\n    cout << cache.get(2)) << endl;  // returns -1 (not found)\n    \n    return 0;\n}",
    ],
    hard: [
      "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Stack {\nprivate:\n    vector<int> data;\npublic:\n    void push(int x) {\n        data.push_back(x);\n    }\n    \n    void pop() {\n        if(!data.empty()) {\n            data.pop_back();\n        }\n    }\n    \n    int top() {\n        return data.back();\n    }\n    \n    bool empty() {\n        return data.empty();\n    }\n};\n\nint main() {\n    Stack s;\n    s.push(10);\n    s.push(20);\n    cout << s.top() << endl;\n    return 0;\n}",
      "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid quickSort(vector<int>& arr, int low, int high) {\n    if(low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nint partition(vector<int>& arr, int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    \n    for(int j = low; j < high; j++) {\n        if(arr[j] < pivot) {\n            i++;\n            swap(arr[i], arr[j]);\n        }\n    }\n    swap(arr[i + 1], arr[high]);\n    return i + 1;\n}",
      '#include <iostream>\n#include <vector>\n#include <queue>\n#include <climits>\nusing namespace std;\n\nclass Graph {\npublic:\n    int V;\n    vector<vector<pair<int, int>>> adj;\n    \n    Graph(int vertices) : V(vertices) {\n        adj.resize(V);\n    }\n    \n    void addEdge(int u, int v, int weight) {\n        adj[u].push_back({v, weight});\n        adj[v].push_back({u, weight});\n    }\n    \n    vector<int> dijkstra(int src) {\n        vector<int> dist(V, INT_MAX);\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        \n        dist[src] = 0;\n        pq.push({0, src});\n        \n        while(!pq.empty()) {\n            int u = pq.top().second;\n            pq.pop();\n            \n            for(auto& edge : adj[u]) {\n                int v = edge.first;\n                int weight = edge.second;\n                \n                if(dist[u] + weight < dist[v]) {\n                    dist[v] = dist[u] + weight;\n                    pq.push({dist[v], v});\n                }\n            }\n        }\n        \n        return dist;\n    }\n};\n\nint main() {\n    Graph g(9);\n    g.addEdge(0, 1, 4);\n    g.addEdge(0, 7, 8);\n    g.addEdge(1, 2, 8);\n    g.addEdge(1, 7, 11);\n    g.addEdge(2, 3, 7);\n    g.addEdge(2, 8, 2);\n    g.addEdge(2, 5, 4);\n    g.addEdge(3, 4, 9);\n    g.addEdge(3, 5, 14);\n    g.addEdge(4, 5, 10);\n    g.addEdge(5, 6, 2);\n    g.addEdge(6, 7, 1);\n    g.addEdge(6, 8, 6);\n    g.addEdge(7, 8, 7);\n    \n    vector<int> distances = g.dijkstra(0);\n    \n    cout << "Shortest distances from vertex 0:" << endl;\n    for(int i = 0; i < distances.size(); i++) {\n        cout << "Vertex " << i << ": " << distances[i] << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nstruct Item {\n    int value, weight;\n    double ratio;\n};\n\nbool compare(Item a, Item b) {\n    return a.ratio > b.ratio;\n}\n\ndouble fractionalKnapsack(int W, vector<Item>& items) {\n    sort(items.begin(), items.end(), compare);\n    \n    double totalValue = 0;\n    int currentWeight = 0;\n    \n    for(Item& item : items) {\n        if(currentWeight + item.weight <= W) {\n            currentWeight += item.weight;\n            totalValue += item.value;\n        } else {\n            int remainingWeight = W - currentWeight;\n            totalValue += item.value * ((double)remainingWeight / item.weight);\n            break;\n        }\n    }\n    \n    return totalValue;\n}\n\nint main() {\n    int W = 50;\n    vector<Item> items = {\n            new Item(60, 10),\n            new Item(100, 20),\n            new Item(120, 30)\n        };\n    \n    for(auto& item : items) {\n        item.ratio = (double)item.value / item.weight;\n    }\n    \n    double maxValue = fractionalKnapsack(W, items);\n    cout << "Maximum value: " << maxValue << endl;\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    TrieNode* children[26];\n    bool isEndOfWord;\n    \n    TrieNode() {\n        isEndOfWord = false;\n        for(int i = 0; i < 26; i++) {\n            children[i] = nullptr;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string word) {\n        TrieNode* current = root;\n        for(char c : word.toCharArray()) {\n            int index = c - \'a\';\n            if(current->children[index] == nullptr) {\n                current->children[index] = new TrieNode();\n            }\n            current = current->children[index];\n        }\n        current->isEndOfWord = true;\n    }\n    \n    bool search(string word) {\n        TrieNode* current = root;\n        for(char c : word.toCharArray()) {\n            int index = c - \'a\';\n            if(current->children[index] == nullptr) {\n                return false;\n            }\n            current = current->children[index];\n        }\n        return current->isEndOfWord;\n    }\n    \n    bool startsWith(string prefix) {\n        TrieNode* current = root;\n        for(char c : prefix.toCharArray()) {\n            int index = c - \'a\';\n            if(current->children[index] == nullptr) {\n                return false;\n            }\n            current = current->children[index];\n        }\n        return true;\n    }\n};\n\nint main() {\n    Trie trie;\n    trie.insert("apple");\n    trie.insert("app");\n    \n    cout << "Search \\"app\\": " << (trie.search("app") ? "true" : "false") << endl;\n    cout << "Search \\"apple\\": " << (trie.search("apple") ? "true" : "false") << endl;\n    cout << "Starts with \\"app\\": " << (trie.startsWith("app") ? "true" : "false") << endl;\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass UnionFind {\npublic:\n    vector<int> parent, rank;\n    \n    UnionFind(int n) {\n        parent.resize(n);\n        rank.resize(n, 0);\n        for(int i = 0; i < n; i++) {\n            parent[i] = i;\n        }\n    }\n    \n    int find(int x) {\n        if(parent[x] != x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n    \n    void unite(int x, int y) {\n        int px = find(x), py = find(y);\n        if(px == py) return;\n        \n        if(rank[px] < rank[py]) {\n            parent[px] = py;\n        } else if(rank[px] > rank[py]) {\n            parent[py] = px;\n        } else {\n            parent[py] = px;\n            rank[px]++;\n        }\n    }\n    \n    bool connected(int x, int y) {\n        return find(x) == find(y);\n    }\n};\n\nstruct Edge {\n    int u, v, weight;\n    bool operator<(const Edge& other) const {\n        return weight < other.weight;\n    }\n};\n\nvector<Edge> kruskalMST(vector<Edge>& edges, int n) {\n    sort(edges.begin(), edges.end());\n    UnionFind uf(n);\n    vector<Edge> mst;\n    \n    for(Edge& e : edges) {\n        if(!uf.connected(e.u, e.v)) {\n            uf.unite(e.u, e.v);\n            mst.push_back(e);\n        }\n    }\n    \n    return mst;\n}\n\nint main() {\n    vector<Edge> edges = {{0, 1, 10}, {0, 2, 6}, {0, 3, 5}, {1, 3, 15}, {2, 3, 4}};\n    int n = 4;\n    \n    vector<Edge> mst = kruskalMST(edges, n);\n    \n    cout << "Minimum Spanning Tree:" << endl;\n    for(Edge& e : mst) {\n        cout << e.u << " - " << e.v << " : " << e.weight << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <climits>\nusing namespace std;\n\nint knapsack(int W, vector<int>& weights, vector<int>& values, int n) {\n    vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));\n    \n    for(int i = 1; i <= n; i++) {\n        for(int w = 1; w <= W; w++) {\n            if(weights[i-1] <= w) {\n                dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]);\n            } else {\n                dp[i][w] = dp[i-1][w];\n            }\n        }\n    }\n    \n    return dp[n][W];\n}\n\nint main() {\n    vector<int> weights = {10, 20, 30};\n    vector<int> values = {60, 100, 120};\n    int W = 50;\n    int n = weights.size();\n    \n    int maxValue = knapsack(W, weights, values, n);\n    cout << "Maximum value: " << maxValue << endl;\n    \n    return 0;\n}',
      "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass NQueens {\npublic:\n    vector<vector<string>> solveNQueens(int n) {\n        vector<vector<string>> result;\n        vector<string> board(n, string(n, '.'));\n        solve(result, board, 0, n);\n        return result;\n    }\n    \nprivate:\n    void solve(vector<vector<string>>& result, vector<string>& board, int row, int n) {\n        if(row == n) {\n            result.push_back(board);\n            return;\n        }\n        \n        for(int col = 0; col < n; col++) {\n            if(isSafe(board, row, col, n)) {\n                board[row][col] = 'Q';\n                solve(result, board, row + 1, n);\n                board[row][col] = '.';\n            }\n        }\n    }\n    \n    bool isSafe(vector<string>& board, int row, int col, int n) {\n        for(int i = 0; i < row; i++) {\n            if(board[i][col] == 'Q') return false;\n        }\n        \n        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if(board[i][j] == 'Q') return false;\n        }\n        \n        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\n            if(board[i][j] == 'Q') return false;\n        }\n        \n        return true;\n    }\n};\n\nint main() {\n    NQueens nq;\n    vector<vector<string>> solutions = nq.solveNQueens(4);\n    \n    cout << \"Number of solutions: \" << solutions.size() << endl;\n    \n    if(!solutions.empty()) {\n        cout << \"First solution:\" << endl;\n        for(string& row : solutions[0]) {\n            cout << row << endl;\n        }\n    }\n    \n    return 0;\n}",
      '#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass SuffixArray {\npublic:\n    vector<int> suffixArray;\n    string text;\n    \n    SuffixArray(string s) : text(s) {\n        buildSuffixArray();\n    }\n    \n    void buildSuffixArray() {\n        int n = text.length();\n        vector<pair<string, int>> suffixes;\n        \n        for(int i = 0; i < n; i++) {\n            suffixes.push_back({text.substr(i), i});\n        }\n        \n        sort(suffixes.begin(), suffixes.end());\n        \n        suffixArray.resize(n);\n        for(int i = 0; i < n; i++) {\n            suffixArray[i] = suffixes[i].second;\n        }\n    }\n    \n    int search(string pattern) {\n        int n = text.length();\n        int m = pattern.length();\n        \n        int left = 0, right = n - 1;\n        \n        while(left <= right) {\n            int mid = (left + right) / 2;\n            int res = text.substr(suffixArray[mid], m).compare(pattern);\n            \n            if(res == 0) {\n                return suffixArray[mid];\n            } else if(res < 0) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return -1;\n    }\n    \n    void printSuffixArray() {\n        for(int i = 0; i < suffixArray.size(); i++) {\n            cout << suffixArray[i] << " " << text.substr(suffixArray[i]) << endl;\n        }\n    }\n};\n\nint main() {\n    string text = "banana";\n    SuffixArray sa(text);\n    \n    cout << "Suffix Array:" << endl;\n    sa.printSuffixArray();\n    \n    string pattern = "ana";\n    int pos = sa.search(pattern);\n    \n    if(pos != -1) {\n        cout << "Pattern found at position: " << pos << endl;\n    } else {\n        cout << "Pattern not found" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <queue>\nusing namespace std;\n\nclass MaxFlow {\npublic:\n    vector<vector<int>> capacity, adj;\n    int n;\n    \n    MaxFlow(int vertices) : n(vertices) {\n        capacity.resize(n, vector<int>(n, 0));\n        adj.resize(n);\n    }\n    \n    void addEdge(int u, int v, int cap) {\n        capacity[u][v] = cap;\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n    \n    int bfs(int source, int sink, vector<int>& parent) {\n        vector<bool> visited(n, false);\n        queue<int> q;\n        q.push(source);\n        visited[source] = true;\n        parent[source] = -1;\n        \n        while(!q.empty()) {\n            int u = q.front();\n            q.pop();\n            \n            for(int v : adj[u]) {\n                if(!visited[v] && capacity[u][v] > 0) {\n                    visited[v] = true;\n                    parent[v] = u;\n                    q.push(v);\n                    if(v == sink) return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    int fordFulkerson(int source, int sink) {\n        vector<int> parent(n);\n        int maxFlow = 0;\n        \n        while(bfs(source, sink, parent)) {\n            int pathFlow = INT_MAX;\n            \n            for(int v = sink; v != source; v = parent[v]) {\n                int u = parent[v];\n                pathFlow = min(pathFlow, capacity[u][v]);\n            }\n            \n            for(int v = sink; v != source; v = parent[v]) {\n                int u = parent[v];\n                capacity[u][v] -= pathFlow;\n                capacity[v][u] += pathFlow;\n            }\n            \n            maxFlow += pathFlow;\n        }\n        \n        return maxFlow;\n    }\n};\n\nint main() {\n    MaxFlow mf(6);\n    mf.addEdge(0, 1, 16);\n    mf.addEdge(0, 2, 13);\n    mf.addEdge(1, 2, 10);\n    mf.addEdge(1, 3, 12);\n    mf.addEdge(2, 1, 4);\n    mf.addEdge(2, 4, 14);\n    mf.addEdge(3, 2, 9);\n    mf.addEdge(3, 5, 20);\n    mf.addEdge(4, 3, 7);\n    mf.addEdge(4, 5, 4);\n    \n    cout << "Maximum flow: " << mf.fordFulkerson(0, 5) << endl;\n    \n    return 0;\n}',
      '#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nclass AVLTree {\npublic:\n    struct Node {\n        int key;\n        Node* left;\n        Node* right;\n        int height;\n        \n        Node(int k) : key(k), left(nullptr), right(nullptr), height(1) {}\n    };\n    \n    Node* root;\n    \n    AVLTree() : root(nullptr) {}\n    \n    int getHeight(Node* node) {\n        return node ? node->height : 0;\n    }\n    \n    int getBalance(Node* node) {\n        return node ? getHeight(node->left) - getHeight(node->right) : 0;\n    }\n    \n    Node* rightRotate(Node* y) {\n        Node* x = y->left;\n        Node* T2 = x->right;\n        \n        x->right = y;\n        y->left = T2;\n        \n        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;\n        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;\n        \n        return x;\n    }\n    \n    Node* leftRotate(Node* x) {\n        Node* y = x->right;\n        Node* T2 = y->left;\n        \n        y->left = x;\n        x->right = T2;\n        \n        x->height = max(getHeight(x->left), getHeight(x->right)) + 1;\n        y->height = max(getHeight(y->left), getHeight(y->right)) + 1;\n        \n        return y;\n    }\n    \n    Node* insert(Node* node, int key) {\n        if(!node) return new Node(key);\n        \n        if(key < node->key) {\n            node->left = insert(node->left, key);\n        } else if(key > node->key) {\n            node->right = insert(node->right, key);\n        } else {\n            return node;\n        }\n        \n        node->height = 1 + max(getHeight(node->left), getHeight(node->right));\n        \n        int balance = getBalance(node);\n        \n        if(balance > 1 && key < node->left->key) {\n            return rightRotate(node);\n        }\n        \n        if(balance < -1 && key > node->right->key) {\n            return leftRotate(node);\n        }\n        \n        if(balance > 1 && key > node->left->key) {\n            node->left = leftRotate(node->left);\n            return rightRotate(node);\n        }\n        \n        if(balance < -1 && key < node->right->key) {\n            node->right = rightRotate(node->right);\n            return leftRotate(node);\n        }\n        \n        return node;\n    }\n    \n    void insert(int key) {\n        root = insert(root, key);\n    }\n    \n    void inorderTraversal(Node* node) {\n        if(node) {\n            inorderTraversal(node->left);\n            cout << node->key << " ";\n            inorderTraversal(node->right);\n        }\n    }\n    \n    void printInorder() {\n        inorderTraversal(root);\n        cout << endl;\n    }\n};\n\nint main() {\n    AVLTree avl;\n    avl.insert(10);\n    avl.insert(20);\n    avl.insert(30);\n    avl.insert(40);\n    avl.insert(50);\n    avl.insert(25);\n    \n    cout << "Inorder traversal of AVL tree: ";\n    avl.printInorder();\n    \n    return 0;\n}',
    ],
  },
  java: {
    easy: [
      'public class Hello {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n    }\n}',
      "public class Main {\n    public static void main(String[] args) {\n        int x = 10, y = 20;\n        System.out.println(x + y);\n    }\n}",
      'public class Main {\n    public static void main(String[] args) {\n        for(int i = 0; i < 5; i++) {\n            System.out.print(i + " ");\n        }\n    }\n}',
      "public class Main {\n    public static void main(String[] args) {\n        int[] arr = {1, 2, 3, 4, 5};\n        int sum = 0;\n        for(int num : arr) {\n            sum += num;\n        }\n        System.out.println(sum);\n    }\n}",
      'public class Main {\n    public static void main(String[] args) {\n        int age = 25;\n        if(age >= 18) {\n            System.out.println("Adult");\n        } else {\n            System.out.println("Minor");\n        }\n    }\n}',
      'public class Main {\n    public static void main(String[] args) {\n        int count = 0;\n        while(count < 3) {\n            System.out.println("Count: " + count);\n            count++;\n        }\n    }\n}',
      'public class Main {\n    public static void main(String[] args) {\n        String name = "Alice";\n        System.out.println("Hello, " + name + "!");\n    }\n}',
      'public class Main {\n    public static void main(String[] args) {\n        int num = 7;\n        if(num % 2 == 0) {\n            System.out.println("Even");\n        } else {\n            System.out.println("Odd");\n        }\n    }\n}',
      'public class Main {\n    public static void main(String[] args) {\n        int factorial = 1;\n        int n = 5;\n        for(int i = 1; i <= n; i++) {\n            factorial *= i;\n        }\n        System.out.println("Factorial of " + n + " is " + factorial);\n    }\n}',
      "public class Main {\n    public static void main(String[] args) {\n        char grade = 'A';\n        switch(grade) {\n            case 'A':\n                System.out.println(\"Excellent!\");\n                break;\n            case 'B':\n                System.out.println(\"Good!\");\n                break;\n            case 'C':\n                System.out.println(\"Average!\");\n                break;\n            default:\n                System.out.println(\"Keep trying!\");\n        }\n    }\n}",
      'public class Main {\n    public static void main(String[] args) {\n        double radius = 5.0;\n        double area = Math.PI * radius * radius;\n        System.out.println("Area of circle: " + area);\n    }\n}',
      'public class Main {\n    public static void main(String[] args) {\n        int[] arr = {10, 20, 30, 40, 50};\n        System.out.print("Array elements: ");\n        for(int num : arr) {\n            System.out.print(num + " ");\n        }\n        System.out.println();\n    }\n}',
      'public class Main {\n    public static void main(String[] args) {\n        int a = 5, b = 10;\n        System.out.println("Before swap: a = " + a + ", b = " + b);\n        int temp = a;\n        a = b;\n        b = temp;\n        System.out.println("After swap: a = " + a + ", b = " + b);\n    }\n}',
      'public class Main {\n    public static void main(String[] args) {\n        String text = "Hello World";\n        System.out.println("Length of string: " + text.length());\n    }\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int table = 5;\n    cout << "Multiplication table of " << table << ":" << endl;\n    for(int i = 1; i <= 10; i++) {\n        cout << table << " x " << i << " = " << table * i << endl;\n    }\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int num, digit, sum = 0;\n    cout << "Enter a number: ";\n    cin >> num;\n    \n    while(num > 0) {\n        digit = num % 10;\n        sum += digit;\n        num /= 10;\n    }\n    \n    cout << "Sum of digits: " << sum << endl;\n    return 0;\n}',
      "#include <iostream>\n#include <string>\nusing namespace std;\n\nint main() {\n    string str;\n    cout << \"Enter a string: \";\n    getline(cin, str);\n    \n    int vowels = 0;\n    for(char c : str) {\n        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' ||\n           c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            vowels++;\n        }\n    }\n    \n    cout << \"Number of vowels: \" << vowels << endl;\n    return 0;\n}",
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, reversed = 0;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    while(n > 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    \n    cout << "Reversed number: " << reversed << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n, sum = 0;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    for(int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    \n    cout << "Sum of first " << n << " natural numbers: " << sum << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {10, 20, 30, 40, 50};\n    int max_val = arr[0];\n    \n    for(int i = 1; i < 5; i++) {\n        if(arr[i] > max_val) {\n            max_val = arr[i];\n        }\n    }\n    \n    cout << "Maximum value: " << max_val << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter number of terms: ";\n    cin >> n;\n    \n    int first = 0, second = 1;\n    cout << "Fibonacci series: " << first << " " << second << " ";\n    \n    for(int i = 2; i < n; i++) {\n        int next = first + second;\n        cout << next << " ";\n        first = second;\n        second = next;\n    }\n    \n    cout << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    bool is_prime = true;\n    if(n <= 1) {\n        is_prime = false;\n    } else {\n        for(int i = 2; i * i <= n; i++) {\n            if(n % i == 0) {\n                is_prime = false;\n                break;\n            }\n        }\n    }\n    \n    if(is_prime) {\n        cout << n << " is prime" << endl;\n    } else {\n        cout << n << " is not prime" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int matrix[3][3] = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}};\n    \n    cout << "Matrix:" << endl;\n    for(int i = 0; i < 3; i++) {\n        for(int j = 0; j < 3; j++) {\n            cout << matrix[i][j] << " ";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    int original = n;\n    int reversed = 0;\n    \n    while(n > 0) {\n        reversed = reversed * 10 + n % 10;\n        n /= 10;\n    }\n    \n    if(original == reversed) {\n        cout << original << " is a palindrome" << endl;\n    } else {\n        cout << original << " is not a palindrome" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    float celsius, fahrenheit;\n    cout << "Enter temperature in Celsius: ";\n    cin >> celsius;\n    \n    fahrenheit = (celsius * 9.0 / 5.0) + 32;\n    cout << celsius << "°C = " << fahrenheit << "°F" << endl;\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter number of rows: ";\n    cin >> n;\n    \n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= i; j++) {\n            cout << "* ";\n        }\n        cout << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int a, b;\n    cout << "Enter two numbers: ";\n    cin >> a >> b;\n    \n    while(b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    \n    cout << "GCD: " << a << endl;\n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int n;\n    cout << "Enter a number: ";\n    cin >> n;\n    \n    int sum = 0;\n    int temp = n;\n    \n    while(temp > 0) {\n        int digit = temp % 10;\n        sum += digit * digit * digit;\n        temp /= 10;\n    }\n    \n    if(sum == n) {\n        cout << n << " is an Armstrong number" << endl;\n    } else {\n        cout << n << " is not an Armstrong number" << endl;\n    }\n    \n    return 0;\n}',
      '#include <iostream>\nusing namespace std;\n\nint main() {\n    int arr[5] = {5, 2, 8, 1, 9};\n    int n = 5;\n    \n    // Bubble sort\n    for(int i = 0; i < n-1; i++) {\n        for(int j = 0; j < n-i-1; j++) {\n            if(arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    \n    cout << "Sorted array: ";\n    for(int i = 0; i < n; i++) {\n        cout << arr[i] << " ";\n    }\n    cout << endl;\n    \n    return 0;\n}',
    ],
    medium: [
      "public class Main {\n    public static int factorial(int n) {\n        if(n == 0) return 1;\n        return n * factorial(n-1);\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(factorial(5));\n    }\n}",
      'import java.util.Arrays;\n\npublic class Main {\n    public static void main(String[] args) {\n        int[] arr = {64, 34, 25, 12, 22, 11, 90};\n        Arrays.sort(arr);\n        for(int num : arr) {\n            System.out.print(num + " ");\n        }\n    }\n}',
      "import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class Main {\n    public static void main(String[] args) {\n        ArrayList<Integer> numbers = new ArrayList<>();\n        numbers.add(3);\n        numbers.add(1);\n        numbers.add(4);\n        numbers.add(2);\n        Collections.sort(numbers);\n        System.out.println(numbers);\n    }\n}",
      'import java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void main(String[] args) {\n        Map<String, Integer> studentGrades = new HashMap<>();\n        studentGrades.put("Alice", 85);\n        studentGrades.put("Bob", 92);\n        studentGrades.put("Charlie", 78);\n        \n        for(Map.Entry<String, Integer> entry : studentGrades.entrySet()) {\n            System.out.println(entry.getKey() + ": " + entry.getValue());\n        }\n    }\n}',
      'import java.util.Scanner;\n\npublic class Main {\n    public static boolean isPalindrome(String str) {\n        String cleaned = str.toLowerCase().replaceAll("[^a-z0-9]", "");\n        int left = 0, right = cleaned.length() - 1;\n        \n        while(left < right) {\n            if(cleaned.charAt(left) != cleaned.charAt(right)) {\n                return false;\n            }\n            left++;\n            right--;\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        String input = "A man a plan a canal Panama";\n        \n        if(isPalindrome(input)) {\n            System.out.println("The string is a palindrome");\n        } else {\n            System.out.println("The string is not a palindrome");\n        }\n    }\n}',
      'import java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> map = new HashMap<>();\n        \n        for(int i = 0; i < nums.length; i++) {\n            int complement = target - nums[i];\n            if(map.containsKey(complement)) {\n                return new int[]{map.get(complement), i};\n            }\n            map.put(nums[i], i);\n        }\n        return new int[]{};\n    }\n    \n    public static void main(String[] args) {\n        int[] nums = {2, 7, 11, 15};\n        int target = 9;\n        \n        int[] result = twoSum(nums, target);\n        if(result.length > 0) {\n            System.out.println("Indices: " + result[0] + ", " + result[1]);\n        } else {\n            System.out.println("No solution found");\n        }\n    }\n}',
      'class ListNode {\n    int val;\n    ListNode next;\n    ListNode(int val) { this.val = val; }\n}\n\npublic class Main {\n    public static ListNode reverseList(ListNode head) {\n        ListNode prev = null;\n        ListNode current = head;\n        \n        while(current != null) {\n            ListNode next = current.next;\n            current.next = prev;\n            prev = current;\n            current = next;\n        }\n        return prev;\n    }\n    \n    public static void printList(ListNode head) {\n        ListNode current = head;\n        while(current != null) {\n            System.out.print(current.val + " ");\n            current = current.next;\n        }\n        System.out.println();\n    }\n    \n    public static void main(String[] args) {\n        ListNode head = new ListNode(1);\n        head.next = new ListNode(2);\n        head.next.next = new ListNode(3);\n        head.next.next.next = new ListNode(4);\n        \n        System.out.print("Original list: ");\n        printList(head);\n        \n        ListNode reversed = reverseList(head);\n        System.out.print("Reversed list: ");\n        printList(reversed);\n    }\n}',
      'public class Main {\n    public static int binarySearch(int[] arr, int target) {\n        int left = 0, right = arr.length - 1;\n        \n        while(left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if(arr[mid] == target) {\n                return mid;\n            } else if(arr[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {1, 3, 5, 7, 9, 11, 13, 15};\n        int target = 7;\n        \n        int result = binarySearch(arr, target);\n        if(result != -1) {\n            System.out.println("Element found at index: " + result);\n        } else {\n            System.out.println("Element not found");\n        }\n    }\n}',
      'import java.util.ArrayList;\nimport java.util.List;\n\nclass Student {\n    private String name;\n    private List<Integer> grades;\n    \n    public Student(String name) {\n        this.name = name;\n        this.grades = new ArrayList<>();\n    }\n    \n    public void addGrade(int grade) {\n        grades.add(grade);\n    }\n    \n    public double getAverage() {\n        if(grades.isEmpty()) return 0;\n        \n        int sum = 0;\n        for(int grade : grades) {\n            sum += grade;\n        }\n        return (double)sum / grades.size();\n    }\n    \n    public void display() {\n        System.out.println("Student: " + name);\n        System.out.print("Grades: ");\n        for(int grade : grades) {\n            System.out.print(grade + " ");\n        }\n        System.out.println();\n        System.out.println("Average: " + String.format("%.2f", getAverage()));\n    }\n};\n\npublic class Main {\n    public static void main(String[] args) {\n        Student student = new Student("John");\n        student.addGrade(85);\n        student.addGrade(92);\n        student.addGrade(78);\n        student.addGrade(96);\n        \n        student.display();\n    }\n}',
      'import java.util.*;\n\nclass Graph {\n    private int vertices;\n    private List<List<Integer>> adjacencyList;\n    \n    public Graph(int vertices) {\n        this.vertices = vertices;\n        adjacencyList = new ArrayList<>();\n        for(int i = 0; i < vertices; i++) {\n            adjacencyList.add(new ArrayList<>());\n        }\n    }\n    \n    public void addEdge(int u, int v) {\n        adjacencyList.get(u).add(v);\n        adjacencyList.get(v).add(u);\n    }\n    \n    public void BFS(int start) {\n        boolean[] visited = new boolean[vertices];\n        Queue<Integer> queue = new LinkedList<>();\n        \n        visited[start] = true;\n        queue.offer(start);\n        \n        System.out.print("BFS traversal: ");\n        while(!queue.isEmpty()) {\n            int u = queue.poll();\n            System.out.print(u + " ");\n            \n            for(int v : adjacencyList.get(u)) {\n                if(!visited[v]) {\n                    visited[v] = true;\n                    queue.offer(v);\n                }\n            }\n        }\n        System.out.println();\n    }\n    \n    public void DFS(int start) {\n        boolean[] visited = new boolean[vertices];\n        System.out.print("DFS traversal: ");\n        DFSUtil(start, visited);\n        System.out.println();\n    }\n    \nprivate:\n    void DFSUtil(int u, boolean[] visited) {\n        visited[u] = true;\n        System.out.print(u + " ");\n        \n        for(int v : adjacencyList.get(u)) {\n            if(!visited[v]) {\n                DFSUtil(v, visited);\n            }\n        }\n    }\n};\n\npublic class Main {\n    public static void main(String[] args) {\n        Graph g = new Graph(4);\n        g.addEdge(0, 1);\n        g.addEdge(0, 2);\n        g.addEdge(1, 2);\n        g.addEdge(2, 3);\n        \n        g.BFS(0);\n        g.DFS(0);\n    }\n}',
      'public class Main {\n    public static void mergeSort(int[] arr, int left, int right) {\n        if(left < right) {\n            int mid = left + (right - left) / 2;\n            \n            mergeSort(arr, left, mid);\n            mergeSort(arr, mid + 1, right);\n            merge(arr, left, mid, right);\n        }\n    }\n    \n    public static void merge(int[] arr, int left, int mid, int right) {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n        \n        int[] L = new int[n1];\n        int[] R = new int[n2];\n        \n        for(int i = 0; i < n1; i++) {\n            L[i] = arr[left + i];\n        }\n        for(int j = 0; j < n2; j++) {\n            R[j] = arr[mid + 1 + j];\n        }\n        \n        int i = 0, j = 0, k = left;\n        \n        while(i < n1 && j < n2) {\n            if(L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n        \n        while(i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n        \n        while(j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {64, 34, 25, 12, 22, 11, 90};\n        \n        System.out.print("Original array: ");\n        for(int num : arr) {\n            System.out.print(num + " ");\n        }\n        System.out.println();\n        \n        mergeSort(arr, 0, arr.length - 1);\n        \n        System.out.print("Sorted array: ");\n        for(int num : arr) {\n            System.out.print(num + " ");\n        }\n        System.out.println();\n    }\n}',
      "import java.util.*;\n\nclass LRUCache {\n    private int capacity;\n    private Map<Integer, Integer> cache;\n    private LinkedList<Integer> order;\n    \n    public LRUCache(int capacity) {\n        this.capacity = capacity;\n        this.cache = new HashMap<>();\n        this.order = new LinkedList<>();\n    }\n    \n    public int get(int key) {\n        if(cache.containsKey(key)) {\n            order.remove(Integer.valueOf(key));\n            order.addLast(key);\n            return cache.get(key);\n        }\n        return -1;\n    }\n    \n    public void put(int key, int value) {\n        if(cache.containsKey(key)) {\n            order.remove(Integer.valueOf(key));\n        } else if(cache.size() >= capacity) {\n            int lruKey = order.removeFirst();\n            cache.remove(lruKey);\n        }\n        \n        cache.put(key, value);\n        order.addLast(key);\n    }\n};\n\npublic class Main {\n    public static void main(String[] args) {\n        LRUCache cache = new LRUCache(2);\n        cache.put(1, 1);\n        cache.put(2, 2);\n        System.out.println(cache.get(1)) << endl;  // returns 1\n        cache.put(3, 3);              // evicts key 2\n        System.out.println(cache.get(2)) << endl;  // returns -1 (not found)\n    }\n}",
      'import java.util.HashMap;\nimport java.util.Map;\n\npublic class Main {\n    public static void wordFrequency(String text) {\n        String[] words = text.toLowerCase().split("\\\\s+");\n        Map<String, Integer> frequency = new HashMap<>();\n        \n        for(String word : words) {\n            frequency.put(word, frequency.getOrDefault(word, 0) + 1);\n        }\n        \n        System.out.println("Word frequencies:");\n        for(Map.Entry<String, Integer> entry : frequency.entrySet()) {\n            System.out.println(entry.getKey() + ": " + entry.getValue());\n        }\n    }\n    \n    public static void main(String[] args) {\n        String text = "hello world hello java world";\n        wordFrequency(text);\n    }\n}',
      'import java.util.ArrayList;\nimport java.util.List;\n\npublic class Main {\n    public static int gcd(int a, int b) {\n        while(b != 0) {\n            int temp = b;\n            b = a % b;\n            a = temp;\n        }\n        return a;\n    }\n    \n    public static int lcm(int a, int b) {\n        return Math.abs(a * b) / gcd(a, b);\n    }\n    \n    public static List<Integer> rotateArray(List<Integer> arr, int k) {\n        if(arr.isEmpty()) return arr;\n        \n        k = k % arr.size();\n        List<Integer> result = new ArrayList<>();\n        \n        for(int i = k; i < arr.size(); i++) {\n            result.add(arr.get(i));\n        }\n        for(int i = 0; i < k; i++) {\n            result.add(arr.get(i));\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println("GCD of 12 and 18: " + gcd(12, 18));\n        System.out.println("LCM of 12 and 18: " + lcm(12, 18));\n        \n        List<Integer> original = List.of(1, 2, 3, 4, 5);\n        List<Integer> rotated = rotateArray(new ArrayList<>(original), 2);\n        System.out.println("Original: " + original);\n        System.out.println("Rotated: " + rotated);\n    }\n}',
      'import java.util.regex.Pattern;\n\npublic class Main {\n    public static boolean validateEmail(String email) {\n        String regex = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}$";\n        return Pattern.matches(regex, email);\n    }\n    \n    public static List<Integer> flattenList(List<Object> nestedList) {\n        List<Integer> result = new ArrayList<>();\n        \n        for(Object item : nestedList) {\n            if(item instanceof List) {\n                result.addAll(flattenList((List<Object>)item));\n            } else if(item instanceof Integer) {\n                result.add((Integer)item);\n            }\n        }\n        \n        return result;\n    }\n    \n    public static void main(String[] args) {\n        System.out.println(validateEmail("user@example.com"));\n        System.out.println(validateEmail("invalid-email"));\n        \n        // Note: Java doesn\'t have native nested lists like Python,\n        // so this is a simplified example\n        List<Object> nested = List.of(1, List.of(2, 3), List.of(4, List.of(5, 6)), 7);\n        System.out.println("Flattened: " + flattenList(nested));\n    }\n}',
      'import java.util.*;\n\npublic class Main {\n    public static void insertionSort(int[] arr) {\n        for(int i = 1; i < arr.length; i++) {\n            int key = arr[i];\n            int j = i - 1;\n            \n            while(j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j--;\n            }\n            arr[j + 1] = key;\n        }\n    }\n    \n    public static boolean areAnagrams(String str1, String str2) {\n        if(str1.length() != str2.length()) {\n            return false;\n        }\n        \n        char[] arr1 = str1.toLowerCase().toCharArray();\n        char[] arr2 = str2.toLowerCase().toCharArray();\n        \n        Arrays.sort(arr1);\n        Arrays.sort(arr2);\n        \n        return Arrays.equals(arr1, arr2);\n    }\n    \n    public static int findMissingNumber(int[] nums) {\n        int n = nums.length + 1;\n        int expectedSum = n * (n + 1) / 2;\n        int actualSum = 0;\n        \n        for(int num : nums) {\n            actualSum += num;\n        }\n        \n        return expectedSum - actualSum;\n    }\n    \n    public static void main(String[] args) {\n        int[] data = {12, 11, 13, 5, 6};\n        insertionSort(data);\n        System.out.println("Sorted array: " + Arrays.toString(data));\n        \n        System.out.println("Anagrams: " + areAnagrams("listen", "silent"));\n        System.out.println("Anagrams: " + areAnagrams("hello", "world"));\n        \n        int[] numbers = {1, 2, 4, 5, 6};\n        System.out.println("Missing number: " + findMissingNumber(numbers));\n    }\n}',
      'import java.util.*;\n\nclass Queue<T> {\n    private List<T> items;\n    \n    public Queue() {\n        items = new ArrayList<>();\n    }\n    \n    public void enqueue(T item) {\n        items.add(item);\n    }\n    \n    public T dequeue() {\n        if(!items.isEmpty()) {\n            return items.remove(0);\n        }\n        return null;\n    }\n    \n    public boolean isEmpty() {\n        return items.isEmpty();\n    }\n    \n    public int size() {\n        return items.size();\n    }\n}\n\npublic class Main {\n    public static List<List<String>> groupAnagrams(String[] strs) {\n        Map<String, List<String>> groups = new HashMap<>();\n        \n        for(String str : strs) {\n            char[] chars = str.toCharArray();\n            Arrays.sort(chars);\n            String key = new String(chars);\n            \n            groups.computeIfAbsent(key, k -> new ArrayList<>()).add(str);\n        }\n        \n        return new ArrayList<>(groups.values());\n    }\n    \n    public static void main(String[] args) {\n        Queue<Integer> queue = new Queue<>();\n        queue.enqueue(1);\n        queue.enqueue(2);\n        queue.enqueue(3);\n        \n        System.out.println("Dequeued: " + queue.dequeue());\n        System.out.println("Queue size: " + queue.size());\n        \n        String[] words = {"eat", "tea", "tan", "ate", "nat", "bat"};\n        List<List<String>> anagramGroups = groupAnagrams(words);\n        System.out.println("Anagram groups: " + anagramGroups);\n    }\n}',
      'public class Main {\n    public static void selectionSort(int[] arr) {\n        for(int i = 0; i < arr.length - 1; i++) {\n            int minIndex = i;\n            \n            for(int j = i + 1; j < arr.length; j++) {\n                if(arr[j] < arr[minIndex]) {\n                    minIndex = j;\n                }\n            }\n            \n            int temp = arr[i];\n            arr[i] = arr[minIndex];\n            arr[minIndex] = temp;\n        }\n    }\n    \n    public static int longestSubstringWithoutRepeating(String s) {\n        Set<Character> charSet = new HashSet<>();\n        int left = 0;\n        int maxLength = 0;\n        \n        for(int right = 0; right < s.length(); right++) {\n            while(charSet.contains(s.charAt(right))) {\n                charSet.remove(s.charAt(left));\n                left++;\n            }\n            charSet.add(s.charAt(right));\n            maxLength = Math.max(maxLength, right - left + 1);\n        }\n        \n        return maxLength;\n    }\n    \n    public static String caesarCipher(String text, int shift) {\n        StringBuilder result = new StringBuilder();\n        \n        for(char c : text.toCharArray()) {\n            if(Character.isLetter(c)) {\n                int base = Character.isUpperCase(c) ? \'A\' : \'a\';\n                int shifted = (c - base + shift) % 26;\n                result.append((char)(shifted + base));\n            } else {\n                result.append(c);\n            }\n        }\n        \n        return result.toString();\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {64, 25, 12, 22, 11};\n        selectionSort(arr);\n        System.out.println("Sorted array: " + Arrays.toString(arr));\n        \n        System.out.println("Longest substring: " + longestSubstringWithoutRepeating("abcabcbb"));\n        \n        String text = "Hello World";\n        String encrypted = caesarCipher(text, 3);\n        System.out.println("Original: " + text + ", Encrypted: " + encrypted);\n    }\n}',
    ],
    hard: [
      "import java.util.Stack;\n\npublic class BalancedParentheses {\n    public static boolean isBalanced(String s) {\n        Stack<Character> stack = new Stack<>();\n        for(char c : s.toCharArray()) {\n            if(c == '(' || c == '{' || c == '[') {\n                stack.push(c);\n            } else if(c == ')' || c == '}' || c == ']') {\n                if(stack.isEmpty()) return false;\n                char top = stack.pop();\n                if(!isMatchingPair(top, c)) return false;\n            }\n        }\n        return stack.isEmpty();\n    }\n    \n    private static boolean isMatchingPair(char open, char close) {\n        return (open == '(' && close == ')') ||\n               (open == '{' && close == '}') ||\n               (open == '[' && close == ']');\n    }\n    \n    public static void main(String[] args) {\n        String test = \"()[]{}([)]\";\n        System.out.println(\"Is balanced: \" + isBalanced(test));\n    }\n}",
      'public class BinarySearch {\n    public static int search(int[] arr, int target) {\n        int left = 0, right = arr.length - 1;\n        \n        while(left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if(arr[mid] == target) {\n                return mid;\n            } else if(arr[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return -1;\n    }\n    \n    public static void main(String[] args) {\n        int[] arr = {1, 3, 5, 7, 9, 11, 13};\n        int result = search(arr, 7);\n        System.out.println("Index: " + result);\n    }\n}',
      'import java.util.*;\n\nclass TreeNode {\n    int val;\n    TreeNode left;\n    TreeNode right;\n    \n    TreeNode(int val) {\n        this.val = val;\n    }\n}\n\npublic class BinaryTree {\n    public static void inorderTraversal(TreeNode root) {\n        if(root != null) {\n            inorderTraversal(root.left);\n            System.out.print(root.val + " ");\n            inorderTraversal(root.right);\n        }\n    }\n    \n    public static void preorderTraversal(TreeNode root) {\n        if(root != null) {\n            System.out.print(root.val + " ");\n            preorderTraversal(root.left);\n            preorderTraversal(root.right);\n        }\n    }\n    \n    public static void postorderTraversal(TreeNode root) {\n        if(root != null) {\n            postorderTraversal(root.left);\n            postorderTraversal(root.right);\n            System.out.print(root.val + " ");\n        }\n    }\n    \n    public static void main(String[] args) {\n        TreeNode root = new TreeNode(1);\n        root.left = new TreeNode(2);\n        root.right = new TreeNode(3);\n        root.left.left = new TreeNode(4);\n        root.left.right = new TreeNode(5);\n        \n        System.out.print("Inorder: ");\n        inorderTraversal(root);\n        System.out.println();\n        \n        System.out.print("Preorder: ");\n        preorderTraversal(root);\n        System.out.println();\n        \n        System.out.print("Postorder: ");\n        postorderTraversal(root);\n        System.out.println();\n    }\n}',
      'import java.util.*;\n\nclass Graph {\n    private int V;\n    private List<List<Edge>> adj;\n    \n    static class Edge {\n        int dest, weight;\n        Edge(int dest, int weight) {\n            this.dest = dest;\n            this.weight = weight;\n        }\n    }\n    \n    public Graph(int V) {\n        this.V = V;\n        adj = new ArrayList<>();\n        for(int i = 0; i < V; i++) {\n            adj.add(new ArrayList<>());\n        }\n    }\n    \n    public void addEdge(int u, int v, int weight) {\n        adj.get(u).add(new Edge(v, weight));\n        adj.get(v).add(new Edge(u, weight));\n    }\n    \n    public int[] dijkstra(int src) {\n        int[] dist = new int[V];\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        dist[src] = 0;\n        \n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[1] - b[1]);\n        pq.offer(new int[]{src, 0});\n        \n        while(!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int u = current[0];\n            int d = current[1];\n            \n            if(d > dist[u]) continue;\n            \n            for(Edge edge : adj.get(u)) {\n                int v = edge.dest;\n                int weight = edge.weight;\n                \n                if(dist[u] + weight < dist[v]) {\n                    dist[v] = dist[u] + weight;\n                    pq.offer(new int[]{v, dist[v]});\n                }\n            }\n        }\n        \n        return dist;\n    }\n    \n    public static void main(String[] args) {\n        Graph g = new Graph(9);\n        g.addEdge(0, 1, 4);\n        g.addEdge(0, 7, 8);\n        g.addEdge(1, 2, 8);\n        g.addEdge(1, 7, 11);\n        g.addEdge(2, 3, 7);\n        g.addEdge(2, 8, 2);\n        g.addEdge(2, 5, 4);\n        g.addEdge(3, 4, 9);\n        g.addEdge(3, 5, 14);\n        g.addEdge(4, 5, 10);\n        g.addEdge(5, 6, 2);\n        g.addEdge(6, 7, 1);\n        g.addEdge(6, 8, 6);\n        g.addEdge(7, 8, 7);\n        \n        int[] distances = g.dijkstra(0);\n        \n        System.out.println("Shortest distances from vertex 0:");\n        for(int i = 0; i < distances.length; i++) {\n            System.out.println("Vertex " + i + ": " + distances[i]);\n        }\n    }\n}',
      'import java.util.*;\n\nclass Item {\n    int value, weight;\n    double ratio;\n    \n    Item(int value, int weight) {\n        this.value = value;\n        this.weight = weight;\n        this.ratio = (double)value / weight;\n    }\n}\n\npublic class FractionalKnapsack {\n    public static double fractionalKnapsack(int W, Item[] items) {\n        Arrays.sort(items, (a, b) -> Double.compare(b.ratio, a.ratio));\n        \n        double totalValue = 0;\n        int currentWeight = 0;\n        \n        for(Item item : items) {\n            if(currentWeight + item.weight <= W) {\n                currentWeight += item.weight;\n                totalValue += item.value;\n            } else {\n                int remainingWeight = W - currentWeight;\n                totalValue += item.value * ((double)remainingWeight / item.weight);\n                break;\n            }\n        }\n        \n        return totalValue;\n    }\n    \n    public static void main(String[] args) {\n        int W = 50;\n        Item[] items = {\n            new Item(60, 10),\n            new Item(100, 20),\n            new Item(120, 30)\n        };\n        \n        double maxValue = fractionalKnapsack(W, items);\n        System.out.println("Maximum value: " + maxValue);\n    }\n}',
      'import java.util.*;\n\nclass TrieNode {\n    TrieNode[] children;\n    boolean isEndOfWord;\n    \n    TrieNode() {\n        children = new TrieNode[26];\n        isEndOfWord = false;\n    }\n}\n\nclass Trie {\n    private TrieNode root;\n    \n    public Trie() {\n        root = new TrieNode();\n    }\n    \n    public void insert(String word) {\n        TrieNode current = root;\n        for(char c : word.toCharArray()) {\n            int index = c - \'a\';\n            if(current.children[index] == null) {\n                current.children[index] = new TrieNode();\n            }\n            current = current.children[index];\n        }\n        current.isEndOfWord = true;\n    }\n    \n    public boolean search(String word) {\n        TrieNode current = root;\n        for(char c : word.toCharArray()) {\n            int index = c - \'a\';\n            if(current.children[index] == null) {\n                return false;\n            }\n            current = current.children[index];\n        }\n        return current.isEndOfWord;\n    }\n    \n    public boolean startsWith(String prefix) {\n        TrieNode current = root;\n        for(char c : prefix.toCharArray()) {\n            int index = c - \'a\';\n            if(current.children[index] == null) {\n                return false;\n            }\n            current = current.children[index];\n        }\n        return true;\n    }\n    \n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert("apple");\n        trie.insert("app");\n        \n        System.out.println("Search \\"app\\": " + trie.search("app"));\n        System.out.println("Search \\"apple\\": " + trie.search("apple"));\n        System.out.println("Starts with \\"app\\": " + trie.startsWith("app"));\n    }\n}',
      'import java.util.*;\n\nclass UnionFind {\npublic:\n    vector<int> parent, rank;\n    \n    UnionFind(int n) {\n        parent.resize(n);\n        rank.resize(n, 0);\n        for(int i = 0; i < n; i++) {\n            parent[i] = i;\n        }\n    }\n    \n    int find(int x) {\n        if(parent[x] != x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n    \n    void unite(int x, int y) {\n        int px = find(x), py = find(y);\n        if(px == py) return;\n        \n        if(rank[px] < rank[py]) {\n            parent[px] = py;\n        } else if(rank[px] > rank[py]) {\n            parent[py] = px;\n        } else {\n            parent[py] = px;\n            rank[px]++;\n        }\n    }\n    \n    bool connected(int x, int y) {\n        return find(x) == find(y);\n    }\n};\n\nclass Edge {\n    int u, v, weight;\n    \n    Edge(int u, int v, int weight) {\n        this.u = u;\n        this.v = v;\n        this.weight = weight;\n    }\n}\n\npublic class KruskalMST {\n    public static List<Edge> kruskalMST(Edge[] edges, int n) {\n        Arrays.sort(edges, (a, b) -> a.weight - b.weight);\n        UnionFind uf = new UnionFind(n);\n        List<Edge> mst = new ArrayList<>();\n        \n        for(Edge e : edges) {\n            if(!uf.connected(e.u, e.v)) {\n                uf.unite(e.u, e.v);\n                mst.add(e);\n            }\n        }\n        \n        return mst;\n    }\n    \n    public static void main(String[] args) {\n        Edge[] edges = {\n            new Edge(0, 1, 10),\n            new Edge(0, 2, 6),\n            new Edge(0, 3, 5),\n            new Edge(1, 3, 15),\n            new Edge(2, 3, 4)\n        };\n        int n = 4;\n        \n        List<Edge> mst = kruskalMST(edges, n);\n        \n        System.out.println("Minimum Spanning Tree:");\n        for(Edge e : mst) {\n            System.out.println(e.u + " - " + e.v + " : " + e.weight);\n        }\n    }\n}',
      'public class KnapsackDP {\n    public static int knapsack(int W, int[] weights, int[] values, int n) {\n        int[][] dp = new int[n + 1][W + 1];\n        \n        for(int i = 1; i <= n; i++) {\n            for(int w = 1; w <= W; w++) {\n                if(weights[i-1] <= w) {\n                    dp[i][w] = max(values[i-1] + dp[i-1][w-weights[i-1]], dp[i-1][w]);\n                } else {\n                    dp[i][w] = dp[i-1][w];\n                }\n            }\n        }\n        \n        return dp[n][W];\n    }\n    \n    public static void main(String[] args) {\n        int[] weights = {10, 20, 30};\n        int[] values = {60, 100, 120};\n        int W = 50;\n        int n = weights.length;\n        \n        int maxValue = knapsack(W, weights, values, n);\n        System.out.println("Maximum value: " + maxValue);\n    }\n}',
      "import java.util.*;\n\npublic class NQueens {\n    public static List<List<String>> solveNQueens(int n) {\n        List<List<String>> result = new ArrayList<>();\n        char[][] board = new char[n][n];\n        \n        for(int i = 0; i < n; i++) {\n            Arrays.fill(board[i], '.');\n        }\n        \n        solve(result, board, 0, n);\n        return result;\n    }\n    \nprivate:\n    static void solve(List<List<String>> result, char[][] board, int row, int n) {\n        if(row == n) {\n            result.push_back(board);\n            return;\n        }\n        \n        for(int col = 0; col < n; col++) {\n            if(isSafe(board, row, col, n)) {\n                board[row][col] = 'Q';\n                solve(result, board, row + 1, n);\n                board[row][col] = '.';\n            }\n        }\n    }\n    \n    static boolean isSafe(char[][] board, int row, int col, int n) {\n        for(int i = 0; i < row; i++) {\n            if(board[i][col] == 'Q') return false;\n        }\n        \n        for(int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if(board[i][j] == 'Q') return false;\n        }\n        \n        for(int i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\n            if(board[i][j] == 'Q') return false;\n        }\n        \n        return true;\n    }\n    \n    public static void main(String[] args) {\n        List<List<String>> solutions = solveNQueens(4);\n        \n        System.out.println(\"Number of solutions: \" + solutions.size());\n        \n        if(!solutions.isEmpty()) {\n            System.out.println(\"First solution:\");\n            for(String row : solutions.get(0)) {\n                System.out.println(row);\n            }\n        }\n    }\n}",
      'public class SuffixArray {\n    private String text;\n    private int[] suffixArray;\n    \n    public SuffixArray(String text) {\n        this.text = text;\n        buildSuffixArray();\n    }\n    \n    private void buildSuffixArray() {\n        int n = text.length();\n        String[] suffixes = new String[n];\n        \n        for(int i = 0; i < n; i++) {\n            suffixes[i] = text.substring(i);\n        }\n        \n        Integer[] indices = new Integer[n];\n        for(int i = 0; i < n; i++) {\n            indices[i] = i;\n        }\n        \n        Arrays.sort(indices, (a, b) -> suffixes[a].compareTo(suffixes[b]));\n        \n        suffixArray = new int[n];\n        for(int i = 0; i < n; i++) {\n            suffixArray[i] = indices[i];\n        }\n    }\n    \n    public int search(String pattern) {\n        int n = text.length();\n        int m = pattern.length();\n        \n        int left = 0, right = n - 1;\n        \n        while(left <= right) {\n            int mid = (left + right) / 2;\n            String suffix = text.substring(suffixArray[mid]);\n            \n            if(suffix.length() >= m) {\n                String prefix = suffix.substring(0, m);\n                int cmp = prefix.compareTo(pattern);\n                \n                if(cmp == 0) {\n                    return suffixArray[mid];\n                } else if(cmp < 0) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            } else {\n                int cmp = suffix.compareTo(pattern);\n                if(cmp < 0) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n        \n        return -1;\n    }\n    \n    public void printSuffixArray() {\n        for(int i = 0; i < suffixArray.length; i++) {\n            System.out.println(suffixArray[i] + " " + text.substring(suffixArray[i]));\n        }\n    }\n    \n    public static void main(String[] args) {\n        String text = "banana";\n        SuffixArray sa = new SuffixArray(text);\n        \n        System.out.println("Suffix Array:");\n        sa.printSuffixArray();\n        \n        String pattern = "ana";\n        int pos = sa.search(pattern);\n        \n        if(pos != -1) {\n            System.out.println("Pattern found at position: " + pos);\n        } else {\n            System.out.println("Pattern not found");\n        }\n    }\n}',
      'import java.util.*;\n\npublic class MaxFlow {\n    private int[][] capacity;\n    private List<List<Integer>> adj;\n    private int n;\n    \n    public MaxFlow(int vertices) {\n        this.n = vertices;\n        capacity = new int[n][n];\n        adj = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            adj.add(new ArrayList<>());\n        }\n    }\n    \n    public void addEdge(int u, int v, int cap) {\n        capacity[u][v] = cap;\n        adj.get(u).add(v);\n        adj.get(v).add(u);\n    }\n    \n    private boolean bfs(int source, int sink, int[] parent) {\n        boolean[] visited = new boolean[n];\n        Queue<Integer> queue = new LinkedList<>();\n        queue.offer(source);\n        visited[source] = true;\n        parent[source] = -1;\n        \n        while(!queue.isEmpty()) {\n            int u = queue.poll();\n            \n            for(int v : adj.get(u)) {\n                if(!visited[v] && capacity[u][v] > 0) {\n                    visited[v] = true;\n                    parent[v] = u;\n                    queue.offer(v);\n                    if(v == sink) return true;\n                }\n            }\n        }\n        \n        return false;\n    }\n    \n    public int fordFulkerson(int source, int sink) {\n        int[] parent = new int[n];\n        int maxFlow = 0;\n        \n        while(bfs(source, sink, parent)) {\n            int pathFlow = Integer.MAX_VALUE;\n            \n            for(int v = sink; v != source; v = parent[v]) {\n                int u = parent[v];\n                pathFlow = Math.min(pathFlow, capacity[u][v]);\n            }\n            \n            for(int v = sink; v != source; v = parent[v]) {\n                int u = parent[v];\n                capacity[u][v] -= pathFlow;\n                capacity[v][u] += pathFlow;\n            }\n            \n            maxFlow += pathFlow;\n        }\n        \n        return maxFlow;\n    }\n    \n    public static void main(String[] args) {\n        MaxFlow mf = new MaxFlow(6);\n        mf.addEdge(0, 1, 16);\n        mf.addEdge(0, 2, 13);\n        mf.addEdge(1, 2, 10);\n        mf.addEdge(1, 3, 12);\n        mf.addEdge(2, 1, 4);\n        mf.addEdge(2, 4, 14);\n        mf.addEdge(3, 2, 9);\n        mf.addEdge(3, 5, 20);\n        mf.addEdge(4, 3, 7);\n        mf.addEdge(4, 5, 4);\n        \n        System.out.println("Maximum flow: " + mf.fordFulkerson(0, 5));\n    }\n}',
      'import java.util.*;\n\nclass AVLNode {\n    int key;\n    AVLNode left, right;\n    int height;\n    \n    AVLNode(int key) {\n        this.key = key;\n        this.height = 1;\n    }\n}\n\nclass AVLTree {\n    private AVLNode root;\n    \n    private int getHeight(AVLNode node) {\n        return node == null ? 0 : node.height;\n    }\n    \n    private int getBalance(AVLNode node) {\n        return node == null ? 0 : getHeight(node.left) - getHeight(node.right);\n    }\n    \n    private AVLNode rightRotate(AVLNode y) {\n        AVLNode x = y.left;\n        AVLNode T2 = x.right;\n        \n        x.right = y;\n        y.left = T2;\n        \n        y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1;\n        x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1;\n        \n        return x;\n    }\n    \n    private AVLNode leftRotate(AVLNode x) {\n        AVLNode y = x.right;\n        AVLNode T2 = y.left;\n        \n        y.left = x;\n        x.right = T2;\n        \n        x.height = Math.max(getHeight(x.left), getHeight(x.right)) + 1;\n        y.height = Math.max(getHeight(y.left), getHeight(y.right)) + 1;\n        \n        return y;\n    }\n    \n    private AVLNode insert(AVLNode node, int key) {\n        if(node == null) return new AVLNode(key);\n        \n        if(key < node.key) {\n            node.left = insert(node.left, key);\n        } else if(key > node.key) {\n            node.right = insert(node.right, key);\n        } else {\n            return node;\n        }\n        \n        node.height = 1 + Math.max(getHeight(node.left), getHeight(node.right));\n        \n        int balance = getBalance(node);\n        \n        if(balance > 1 && key < node.left.key) {\n            return rightRotate(node);\n        }\n        \n        if(balance < -1 && key > node.right.key) {\n            return leftRotate(node);\n        }\n        \n        if(balance > 1 && key > node.left.key) {\n            node.left = leftRotate(node.left);\n            return rightRotate(node);\n        }\n        \n        if(balance < -1 && key < node.right.key) {\n            node.right = rightRotate(node.right);\n            return leftRotate(node);\n        }\n        \n        return node;\n    }\n    \n    public void insert(int key) {\n        root = insert(root, key);\n    }\n    \n    private void inorderTraversal(AVLNode node) {\n        if(node != null) {\n            inorderTraversal(node.left);\n            System.out.print(node.key + " ");\n            inorderTraversal(node.right);\n        }\n    }\n    \n    public void printInorder() {\n        inorderTraversal(root);\n        System.out.println();\n    }\n    \n    public static void main(String[] args) {\n        AVLTree avl = new AVLTree();\n        avl.insert(10);\n        avl.insert(20);\n        avl.insert(30);\n        avl.insert(40);\n        avl.insert(50);\n        avl.insert(25);\n        \n        System.out.print("Inorder traversal of AVL tree: ");\n        avl.printInorder();\n    }\n}',
    ],
  },
};
